<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agilent.TMFramework.InstrumentIO</name>
    </assembly>
    <members>
        <member name="T:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5460XWaveformData">
            <summary>
A class for the Agilent5460X instrument, implementing the IWaveformData interface.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5460XWaveformData.#ctor(System.Byte[],System.String)">
            <summary>
Constructs the Agilent5460X class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5460XWaveformData.#ctor(System.String,System.String)">
            <summary>
Constructs the Agilent5460X class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5460XWaveformData.#ctor(System.Byte[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs the Agilent5460X class with the given data.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="xIncrement">The x increment element from the preamble.</param><param name="xOrigin">The x Origin element from the preamble.</param><param name="xReference">The x Reference element from the preamble.</param><param name="yIncrement">The y increment element from the preamble.</param><param name="yOrigin">The y Origin element from the preamble.</param><param name="yReference">The y Reference element from the preamble.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5460XWaveformData.YData">
            <summary>
Gets the yData array.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5460XWaveformData.StartTime">
            <summary>
Gets the startTime value.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5460XWaveformData.TimeBetweenPoints">
            <summary>
Gets the timeBetweenPoints value.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5461XWaveformData">
            <summary>
A class for the Agilent5461X instrument, implementing the IWaveformData interface.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5461XWaveformData.#ctor(System.Byte[],System.String)">
            <summary>
Constructs the Agilent5461X class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5461XWaveformData.#ctor(System.String,System.String)">
            <summary>
Constructs the Agilent5461x class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5461XWaveformData.#ctor(System.Byte[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs the Agilent5461X class with the given data.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="xIncrement">The x increment element from the preamble.</param><param name="xOrigin">The x Origin element from the preamble.</param><param name="xReference">The x Reference element from the preamble.</param><param name="yIncrement">The y increment element from the preamble.</param><param name="yOrigin">The y Origin element from the preamble.</param><param name="yReference">The y Reference element from the preamble.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5461XWaveformData.YData">
            <summary>
Gets the yData array.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5461XWaveformData.StartTime">
            <summary>
Gets the startTime value.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5461XWaveformData.TimeBetweenPoints">
            <summary>
Gets the timeBetweenPoints value.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5462XWaveformData">
            <summary>
A class for the Agilent5462X instrument, implementing the IWaveformData interface.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5462XWaveformData.#ctor(System.Byte[],System.String)">
            <summary>
Constructs the Agilent5462X class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5462XWaveformData.#ctor(System.String,System.String)">
            <summary>
Constructs the Agilent5462X class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5462XWaveformData.#ctor(System.Byte[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs the Agilent5462X class with the given data.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="xIncrement">The x increment element from the preamble.</param><param name="xOrigin">The x Origin element from the preamble.</param><param name="xReference">The x Reference element from the preamble.</param><param name="yIncrement">The y increment element from the preamble.</param><param name="yOrigin">The y Origin element from the preamble.</param><param name="yReference">The y Reference element from the preamble.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5462XWaveformData.YData">
            <summary>
Gets the yData array.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5462XWaveformData.StartTime">
            <summary>
Gets the startTime value.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5462XWaveformData.TimeBetweenPoints">
            <summary>
Gets the timeBetweenPoints value.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5464XWaveformData">
            <summary>
A class for the Agilent5464X instrument, implementing the IWaveformData interface.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5464XWaveformData.#ctor(System.Byte[],System.String)">
            <summary>
Constructs the Agilent5464X class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5464XWaveformData.#ctor(System.String,System.String)">
            <summary>
Constructs the Agilent5464X class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5464XWaveformData.#ctor(System.Byte[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs the Agilent5464X class with the given data.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="xIncrement">The x increment element from the preamble.</param><param name="xOrigin">The x Origin element from the preamble.</param><param name="xReference">The x Reference element from the preamble.</param><param name="yIncrement">The y increment element from the preamble.</param><param name="yOrigin">The y Origin element from the preamble.</param><param name="yReference">The y Reference element from the preamble.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5464XWaveformData.YData">
            <summary>
Gets the yData array.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5464XWaveformData.StartTime">
            <summary>
Gets the startTime value.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent5464XWaveformData.TimeBetweenPoints">
            <summary>
Gets the timeBetweenPoints value.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent548XXWaveformData">
            <summary>
A class for the Agilent548XX instrument, implementing the IWaveformData interface.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent548XXWaveformData.#ctor(System.Byte[],System.String)">
            <summary>
Constructs the Agilent548XX class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent548XXWaveformData.#ctor(System.String,System.String)">
            <summary>
Constructs the Agilent548XX class with the given rawData and preamble set.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="preamble">The preamble string collected from the instrument.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent548XXWaveformData.#ctor(System.Byte[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs the Agilent548XX class with the given data.
</summary><param name="rawData">The rawData in byte form gathered from the instrument.</param><param name="xIncrement">The x increment element from the preamble.</param><param name="xOrigin">The x Origin element from the preamble.</param><param name="xReference">The x Reference element from the preamble.</param><param name="yIncrement">The y increment element from the preamble.</param><param name="yOrigin">The y Origin element from the preamble.</param><param name="yReference">The y Reference element from the preamble.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent548XXWaveformData.YData">
            <summary>
Gets the yData array.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent548XXWaveformData.StartTime">
            <summary>
Gets the startTime value.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.InstrumentSupport.Agilent548XXWaveformData.TimeBetweenPoints">
            <summary>
Gets the timeBetweenPoints value.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.DirectIO">
            <summary>
The DirectIO class makes the commonly used VISA features easily accessible to you from the .NET 
programming environment. A VISA library must be installed. Agilent I/O Libraries and Agilent VISA 
are strongly recommended.
</summary><example><code>
using System;
using Agilent.TMFramework.InstrumentIO;

class App 
{
    static void Main() 
    {
        DirectIO dmm = null;
        try 
        {
            dmm = new DirectIO("GPIB0::22");
            dmm.WriteLine("MEAS:VOLT:DC?");
            double result = dmm.ReadNumberAsDouble();
            Console.WriteLine("DC Voltage is {0:E4}", result);
        }
        catch (VisaException ex) 
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }
        finally
        {
            // Explicitly dipsose of the DirectIO object to 
            // immediately close the associated VISA session.
            if (dmm != null) dmm.Dispose();
        }
    }
}
</code></example>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.#ctor(System.String)">
            <summary>Creates a default instance for an instrument at the given address.</summary><param name="address">The resource name for the current instrument.</param><remarks>
<para>For more information about instrument connection strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connecting 
Instruments.</a></para>
<para>If the instance is created, then, by default, the session for the instrument is not locked.</para>
<para>The attempt to create the instance lasts for the length of the waitForLockTimeout.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ArgumentException">Only VISA INSTR sessions are supported.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.#ctor(System.String,System.Boolean)">
            <summary>Creates an instance for an instrument at the given address and locks the session depending on the value of the 
<paramref name="locked"/> parameter.</summary><param name="address">The resource name for the current instrument.</param><param name="locked">Whether the session is exclusively locked or not locked.</param><remarks>
<para>For more information about instrument connection strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connecting 
Instruments.</a></para>
<para>The attempt to create the instance lasts for the length of the waitForLockTimeout period.</para>
<para>Before attempting to lock an instrument's session, check the instrument to make sure it supports exclusive locking.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ArgumentException">Only VISA INSTR sessions are supported.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>Attempts (for the specified number of seconds) to create an instance for an instrument at the given 
address. If successful, the session lock state is set depending upon the value of <paramref name="locked"/>.</summary><param name="address">The resource name for the current instrument.</param><param name="locked">Whether the session is exclusively locked or not locked.</param><param name="waitForLockTimeout">The amount of time in milliseconds spent waiting for the instrument to respond 
to a lock request.</param><remarks>
<para>For more information about instrument connection strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connecting 
Instruments.</a></para>
<para>The attempt lasts for the length of the <paramref name="waitForLockTimeout"/> period. If this parameter is 
ignored, the attempt lasts for the length of the <see paramref="Timeout"/> property.</para>
<para>Before attempting to lock an instrument's session, check the instrument to make sure it supports exclusive locking.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ArgumentException">Only VISA INSTR sessions are supported.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Close">
            <summary>Close calls <see cref="M:Agilent.TMFramework.InstrumentIO.DirectIO.Dispose"/>.</summary><remarks>
Close calls <see cref="M:Agilent.TMFramework.InstrumentIO.DirectIO.Dispose"/>. This is the recommended method for ending a session.
</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Dispose">
            <summary>Cleans up all open resources.</summary><remarks>
Dispose cleans up all open resources.
</remarks><exception cref="T:System.InvalidOperationException">This exception occurs when Dispose is called from a ServiceRequest 
event handler. This prevents a multithreading race condition.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SupportsVisaResourceName(System.String)">
            <summary>Checks the VISA Resource String<see paramref="resourceName"/> to see if it can be used to create a 
<see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object.
</summary><param name="resourceName">A string containing the VISA address.</param><returns>Returns <see langword="true"/> if the interface type is GPIB, ASRL, TCPIP, or USB. Returns <see langword="false"/> for all other 
interface types.</returns><exception cref="T:System.ArgumentNullException">The resourceName parameter is null.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SupportsVisaResourceName(Agilent.TMFramework.InstrumentIO.VisaResourceName)">
            <summary>
Checks the VisaResourceName to see if it can be used to create a <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object.
</summary><param name="resourceName">The resource type such as ASRL, GPIB, or USB.</param><returns>Returns <see langword="True"/> if the interface type is GPIB, ASRL, TCPIP, or USB. Returns <see langword="False"/> for all other interface types.
</returns><exception cref="T:System.ArgumentNullException">The resourceName parameter is null.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Lock">
            <summary>
 Attempts to exclusively lock the session.
</summary><overloads>
<summary>
Tries to set an exclusive lock on a session.
</summary>
</overloads><remarks>
Attempts to exclusively lock the session until the lock is achieved or the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.Timeout"/> period expires. 
The default timeout period is viewed or modified through the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.Timeout"/> property.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Lock(System.Int32)">
            <summary>
 Attempts to exclusively lock the session for a user-specified time period as measured in milliseconds. 
</summary><param name="timeout">A user-specified timeout period measured in milliseconds.</param><remarks> 
Attempts to exclusively lock the session. The attempt lasts for the length of the <paramref name="timeout"/> period.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Unlock">
            <summary>
 Removes a lock from a session.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.AssertTrigger">
            <summary>
Sends a trigger to a session.
</summary><remarks>
The type of trigger sent matches the type of session, hardware or software.
</remarks><example><code name="vb">
MyArb.AssertTrigger()
</code></example><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Clear">
            <summary>
Clears the read and write buffers and allows the instrument to receive new commands.
</summary><remarks>This function performs an IEEE 488.1-style clear of the instrument. GPIB uses the Selective Device Clear command.</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadStatusByte">
            <summary>
Queries the instrument for the status byte.
</summary><returns>The status byte supported by the interface.</returns><remarks>
The amount of information provided by the status byte is specific to the interface you are using. For example, in the IEEE 488.1 interface standard, 
the status byte indicates whether the instrument has asserted a service request. In the IEEE 488.2 interface standard, this role is handled by the request
for service bit of the status byte. While the status byte still performs this role, it is also provides more detailed status information.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><exception cref="T:System.NotSupportedException">The session is of type SOCKET, which does not support reading the status byte.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SetReadBufferSize(System.Int32)">
            <summary>
 Sets the read buffer size.
</summary><param name="size">A value in bytes that is greater than 1 and less than the size of a 4 byte integer (approximately 2.147 gigabytes).</param><example><code name="vb">
MyArb.SetReadBufferSize(64000)
</code></example><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="size"/> is less than zero.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SetWriteBufferSize(System.Int32)">
            <summary>
 Sets the write buffer size.
</summary><param name="size">A value in bytes that is greater than 1 and less than the size of a 4 byte integer (approximately 2.147 gigabytes).</param><example><code name="vb">
MyArb.SetWriteBufferSize(128000)
</code></example><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="size"/> is less than zero.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.FlushRead">
            <summary>
 Flushes the read buffer until an End is reached. For serial devices, an End is an ASCII(10) or NL. For GPIB devices, an End is an EOI.
</summary><remarks>
<para>The For serial devices, an End is an ASCII(10) or NL. For GPIB devices, an End is an EOI.</para>
<para>If <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> is <see langword="true"/>, this method can be ignored.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.FlushWrite">
            <summary>
 Flushes the write buffer and sends an End condition.
</summary><overloads>
<summary>
Flushes the write buffer and may send an End condition. 
</summary>
</overloads><remarks>
You will get a COMException if you call FlushWrite with true on an empty buffer.
</remarks><exception cref="T:System.Runtime.InteropServices.COMException">You have called Flushwrite as true on an empty buffer.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.FlushWrite(System.Boolean)">
            <summary>
 Flushes the write buffer and optionally sends an End.
</summary><param name="sendEnd">A <see langword="true"/> value sends an End condition.</param><remarks>
You will get a COMException if you call FlushWrite with true on an empty buffer.
</remarks><example><code>
MyInstrument.FlushWrite(True)
</code></example><exception cref="T:System.Runtime.InteropServices.COMException">You have called Flushwrite as true on an empty buffer.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Write(System.String)">
            <summary>
Writes a string to an instrument.
</summary><example><code>
Dim MyInstr As New DirectIO(TCPIP::portal6::hpib,10)
MyInstr.Write("This is the main instrument.")
</code></example><overloads>
<summary>
These methods write formatted or unformatted strings to the instrument.
</summary>
</overloads><param name="value">The string value.</param><remarks>
If <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> is <see langword="true"/>, the write buffer is flushed and an End is sent.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Write(System.String,System.Object)">
            <summary>
Writes a formatted value to the instrument.
</summary><param name="format">A format specifier for the value passed to the instrument.</param><param name="arg0">The value that is formatted and passed to the instrument.</param><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Write(System.String,System.Object,System.Object)">
            <summary>
 Writes two formatted values to the instrument.
</summary><param name="format">A format specifier for each of the values passed to the instrument.</param><param name="arg0">The first value that is formatted and passed to the instrument.</param><param name="arg1">The second value that is formatted and passed to the instrument.</param><remarks>
You must provide a data format specifier for each value you are passing to the instrument. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
 Writes three formatted values to the instrument.
</summary><param name="format">A format specifier for each of the values passed to the instrument.</param><param name="arg0">The first value that is formatted and passed to the instrument.</param><param name="arg1">The second value that is formatted and passed to the instrument.</param><param name="arg2">The third value that is formatted and passed to the instrument.</param><remarks>
You must provide a data format specifier for each value you are passing to the instrument. <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfsystemstringclassformattopic1.htm">
See Microsoft's documentation.</a>
</remarks><example><code name="vb">
Dim MyInstr As MyInstr = New DirectIO(GPIB0::22::INSTR)
MyInstr.Write(({0:G}{0:G}{0:F}), arg0, arg1, arg2)
</code></example><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Write(System.String,System.Object[])">
            <summary>
 Converts an array of formatted values to a string and writes the string to the instrument.
</summary><param name="format">A format specifier for the array.</param><param name="args">An array of values that is converted and passed to the instrument.</param><remarks>
<para>The array you provide is converted to a string (US English locale) before being written to the instrument. If <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> 
is <see langword="true"/>, the write buffer is flushed and an End condition is sent.</para>
<para>The End condition is a function of the underlying VISA library.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine">
            <summary>
 Writes a <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/> to the instrument.
</summary><overloads>
<summary>
These methods all write formatted or unformatted values followed by a <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/> to the instrument.
</summary>
</overloads><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine(System.String)">
            <summary>
 Writes a string and a <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/> to the instrument.
</summary><param name="value">The user-specified string.</param><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine(System.String,System.Object)">
            <summary>
 Writes a formatted value and a <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/> to the instrument.
</summary><param name="format">A format specifier for the value passed to the instrument.</param><param name="arg0">The value that is formatted and passed to the instrument.</param><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><seealso href="ms-help://MS.NETFrameworkSDK/cpguidenf/html/cpconstandardnumericformatstrings.htm">
Formatting Overview</seealso>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine(System.String,System.Object,System.Object)">
            <summary>
 Writes two formatted values and a <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/> to the instrument.
</summary><param name="format">A format specifier is required for each value passed to the instrument.</param><param name="arg0">The first value that is formatted and passed to the instrument.</param><param name="arg1">The second value that is formatted and passed to the instrument.</param><remarks>
You must provide a data format specifier for each value you are passing to the instrument. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><seealso href="ms-help://MS.NETFrameworkSDK/cpguidenf/html/cpconstandardnumericformatstrings.htm">
Formatting Overview</seealso>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
 Writes three formatted values and a <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/> to the instrument. 
</summary><param name="format">A format specifier is required for each value passed to the instrument.</param><param name="arg0">The first value that is formatted and passed to the instrument.</param><param name="arg1">The second value that is formatted and passed to the instrument.</param><param name="arg2">The third value that is formatted and passed to the instrument.</param><see cref="M:Write3"/><remarks>
You must provide a data format specifier for each value you are passing to the instrument. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><seealso href="ms-help://MS.NETFrameworkSDK/cpguidenf/html/cpconstandardnumericformatstrings.htm">
Formatting Overview</seealso>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine(System.String,System.Object[])">
            <summary>
 Writes an array of formatted values to the instrument.
</summary><param name="format">A format specifier for the array.</param><param name="args">An array of values that is passed to the instrument.</param><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteNumber(System.Byte)">
            <summary>
 Writes a value of type byte to the write buffer.
</summary><overloads>
<summary>
These methods all write number values using various data types to the instrument.
</summary>
</overloads><param name="value"></param><remarks>
If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteNumber(System.Int16)">
            <summary>
 Writes a value of type short to the write buffer.
</summary><param name="value"></param><remarks>
If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteNumber(System.Int32)">
            <summary>
 Writes a value of type integer to the write buffer.
</summary><param name="value"></param><remarks>
If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteNumber(System.Single)">
            <summary>
 Writes a value of type float to the write buffer.
</summary><param name="value"></param><remarks>
If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteNumber(System.Double)">
            <summary>
Writes a value of type double to the write buffer.
</summary><param name="value"></param><remarks>
If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteNumber(System.Object)">
            <summary>
 Writes a value of type object to the write buffer.
</summary><param name="value"></param><remarks>
If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteList(System.Byte[])">
            <summary>
 Writes an array of bytes to the write buffer.
</summary><overloads>
<summary>
These methods all write lists of various data types to the instrument.
</summary>
</overloads><param name="data"></param><remarks>
<para>The array elements are separated using the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> property.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteList(System.Int16[])">
            <summary>
 Writes an array of short integers to the write buffer.
</summary><param name="data"></param><remarks>
The array elements are separated using the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> property.
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteList(System.Int32[])">
            <summary>
 Writes an array of integers to the write buffer.
</summary><param name="data"></param><remarks>
<para>The array elements are separated using the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> property.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteList(System.Single[])">
            <summary>
 Writes an array of floating point values to the write buffer.
</summary><param name="data"></param><remarks>
<para>The array elements are separated using the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> property.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteList(System.Double[])">
            <summary>
 Writes an array of double precision values to the write buffer.
</summary><param name="data"></param><remarks>
<para>The array elements are separated using the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> property.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteList(System.String[])">
            <summary>
 Writes an array of string values to the write buffer.
</summary><param name="data"></param><remarks>
<para>The array elements are separated using the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> property.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteList(System.Object[])">
            <summary>
Writes an array of object values to the write buffer.
</summary><param name="data"></param><remarks>
<para>The array elements are separated using the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> property.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an End is sent to the instrument.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteIeeeBlock(System.Byte[])">
            <summary>
Writes an array of bytes as an IEEE 488.2 definite binary block to the write buffer.
</summary><overloads>
<summary>
All of these methods write an array of values of various data types to the write buffer as an IEEE 
488.2 definite binary block.
</summary>
</overloads><param name="data">An array of bytes that is passed within the IEEE 488.2 block.</param><remarks>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an <b>End</b>, a GPIB End of transmission signal, is sent to the instrument.</para>
<para><b>Note:</b> This method is not a full implementation of VISA. VISA allows you to send a device command, an IEEEBlock, and, if the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, a GPIB End of transmission signal, to the instrument. This implementation allows 
you to send data and, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, or a GPIB End of transmission signal, to the instrument. 
You cannot send an instrument command with this method.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteIeeeBlock(System.Int16[])">
            <summary>
 Writes an array of shorts as an IEEE 488.2 definite binary block to the write buffer.
</summary><param name="data">An array of shorts that is passed within the IEEE 488.2 block.</param><remarks>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an <b>End</b>, a GPIB End of transmission signal, is sent to the instrument.</para>
<para><b>Note:</b> This method is not a full implementation of VISA. VISA allows you to send an instrument command, an IEEEBlock, and, if the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, a GPIB End of transmission signal, to the instrument. This implementation allows 
you to send data and, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, or a GPIB End of transmission signal, to the instrument. 
You cannot send an instrument command with this method.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteIeeeBlock(System.Int32[])">
            <summary>
 Writes an array of integers as an IEEE 488.2 definite binary block to the write buffer.
</summary><remarks>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an <b>End</b>, a GPIB End of transmission signal, is sent to the instrument.</para>
<para><b>Note:</b> This method is not a full implementation of VISA. VISA allows you to send an instrument command, an IEEEBlock, and, if the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, a GPIB End of transmission signal, to the instrument. This implementation allows 
you to send data and, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, or a GPIB End of transmission signal, to the instrument. 
You cannot send an instrument command with this method.</para>
</remarks><param name="data">An array of integers that is passed within the IEEE 488.2 block.</param><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteIeeeBlock(System.Single[])">
            <summary>
 Writes an array of floats as an IEEE 488.2 definite binary block to the write buffer.
</summary><param name="data">An array of floats that is passed within the IEEE 488.2 block.</param><remarks>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an <b>End</b>, a GPIB End of transmission signal, is sent to the instrument.</para>
<para><b>Note:</b> This method is not a full implementation of VISA. VISA allows you to send an instrument command, an IEEEBlock, and, if the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, a GPIB End of transmission signal, to the instrument. This implementation allows 
you to send data and, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, or a GPIB End of transmission signal, to the instrument. 
You cannot send an instrument command with this method.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteIeeeBlock(System.Double[])">
            <summary>
 Writes an array of doubles as an IEEE 488.2 definite binary block to the write buffer.
</summary><param name="data">An array of doubles that is passed within the IEEE 488.2 block.</param><remarks>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an <b>End</b>, a GPIB End of transmission signal, is sent to the instrument.</para>
<para><b>Note:</b> This method is not a full implementation of VISA. VISA allows you to send an instrument command, an IEEEBlock, and, if the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, a GPIB End of transmission signal, to the instrument. This implementation allows 
you to send data and, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, or a GPIB End of transmission signal, to the instrument. 
You cannot send an instrument command with this method.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteIeeeBlock(System.String)">
            <summary>
 Writes an array of strings as an IEEE 488.2 definite binary block to the write buffer.
</summary><param name="data">An array of strings that is passed within the IEEE 488.2 block.</param><remarks>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, then the buffer is flushed and an <b>End</b>, a GPIB End of transmission signal, is sent to the instrument.</para>
<para><b>Note:</b> This method is not a full implementation of VISA. VISA allows you to send an instrument command, an IEEEBlock, and, if the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, a GPIB End of transmission signal, to the instrument. This implementation allows 
you to send data and, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, flush the write buffer and send an <b>End</b>, or a GPIB End of transmission signal, to the instrument. 
You cannot send an instrument command with this method.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Read">
            <summary>
This method reads from the read buffer and returns the data as a string.  The following characters are 
automatically trimmed from the end of the string: CR, LF and if <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/> is 
<see langword="true"/> then the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> also.
</summary><overloads>
<summary>
This method reads from the read buffer and returns the data as a string.  The following characters are 
are either automatically or optionally trimmed from the end of the string: CR, LF and if <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/> is 
<see langword="true"/> then the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> also.
</summary>
</overloads><remarks>
The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is not used for this method. All the data is read until an End condition is reached (termination character, 
End, a GPIB End of transmission signal, or an unparsable character). Unparsable characters remain in the buffer.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><seealso cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/><seealso cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.Read(System.Boolean)">
            <summary>
This method reads from the read buffer and returns the data as a string optionally trimming the following 
characters: CR, LF and if <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/> is <see langword="true"/> then the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> also.
</summary><param name="trimEnd">Trims the following characters from the end of the string: CR, LF and if 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/> is <see langword="true"/> then the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> also.</param><remarks>
The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is not used for this method. All the data is read until an End condition is reached (termination character, 
End, a GPIB End of transmission signal, or an unparsable character). Unparsable characters remain in the buffer.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><seealso cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/><seealso cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadNumber">
            <summary>
Reads number values from the read buffer. 
</summary><overloads>
<summary>
These methods read from the read buffer and converts the buffer contents into numeric values. The 
buffer is read completely until an End condition is reached. Any non-numeric data is discarded.
</summary>
</overloads><remarks>
This method reads from the read buffer and converts the buffer contents into numeric values. 
The read continues until an End condition is reached (unparsable character, a termination 
character, an End, or a GPIB End of transmission signal). If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> 
property is <see langword="true"/>, any non-numeric data remaining in the read buffer is 
discarded until an End occurs.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadNumberAsByte">
            <summary>
 Reads number values from the read buffer and converts them to the data type byte.
</summary><remarks>
This method reads from the read buffer and converts the buffer contents into byte values. The read continues until an End condition is reached 
(unparsable character, a termination character, an End, or a GPIB End of transmission signal). If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any non-numeric
data remaining in the read buffer is discarded until an End condition occurs.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadNumberAsInt16">
            <summary>
 Reads number values from the read buffer and converts them to the data type short.
</summary><remarks>
This method reads from the read buffer and converts the buffer contents into short integer values. The read continues until an End condition is reached 
(unparsable character, a termination character, an End, or a GPIB End of transmission signal). If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any non-numeric
data remaining in the read buffer is discarded until an End condition occurs.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadNumberAsInt32">
            <summary>
 Reads number values from the read buffer and converts them to the data type integer.
</summary><remarks>
This method reads from the read buffer and converts the buffer contents into integer values. The read continues until an End condition is reached 
(unparsable character, a termination character, an End, or a GPIB End of transmission signal). If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any non-numeric
data remaining in the read buffer is discarded until an End condition occurs.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadNumberAsSingle">
            <summary>
 Reads number values from the read buffer and converts them to the data type floating point.
</summary><remarks>
This method reads from the read buffer and converts the buffer contents into floating point values. The read continues until an End condition is reached 
(unparsable character, a termination character, an End, or a GPIB End of transmission signal). If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any non-numeric
data remaining in the read buffer is discarded until an End condition occurs.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadNumberAsDouble">
            <summary>
 Reads number values from the read buffer and converts them to the data type double precision.
</summary><remarks>
This method reads from the read buffer and converts the buffer contents into double precision values. The read continues until an End condition is reached 
(unparsable character, a termination character, an End, or a GPIB End of transmission signal). If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any non-numeric
data remaining in the read buffer is discarded until an End condition occurs.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadList">
            <summary>
 Reads values from the read buffer until an End condition is reached (unparsable character, a termination character, an End, or a GPIB End of transmission signal).
</summary><overloads>
<summary>
These methods read values from the Read buffer and convert them into a list using the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> 
as a delimiter.
</summary>
</overloads><returns>
A one dimensional array of objects.
</returns><remarks>
The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> is stripped from the data stream. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadListAsByteArray">
            <summary>
 Reads values from the read buffer until an End condition is reached (unparsable character, a termination character, an End, or a GPIB End of transmission signal).
</summary><returns>
A one dimensional array of bytes.
</returns><remarks>
The array of bytes uses the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> for delimiting. The values read from the buffer are converted into bytes and returned in a
one dimensional array. The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> is stripped from the data stream. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadListAsInt16Array">
            <summary>
 Reads values from the read buffer until an End condition is reached (unparsable character, a termination character, an End, or a GPIB End of transmission signal).
</summary><returns>
A one dimensional array of short integers.
</returns><remarks>
The array of shorts uses the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> for delimiting. The values read from the buffer are converted into short integers and returned in a
one dimensional array. The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> is stripped from the data stream. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadListAsInt32Array">
            <summary>
 Reads values from the read buffer until an End condition is reached (unparsable character, a termination character, an End, or a GPIB End of transmission signal).
</summary><returns>
A one dimensional array of long integers.
</returns><remarks>
The array of integers uses the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> for delimiting. The values read from the buffer are converted into long integers and returned in a
one dimensional array. The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> is stripped from the data stream. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadListAsSingleArray">
            <summary>
 Reads a list of values from the read buffer until an End condition is reached (unparsable character, a termination character, an End, or a GPIB End of transmission signal).
</summary><returns>
A one dimensional array of floats.
</returns><remarks>
The array of floats uses the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> for delimiting. The values read from the buffer are converted into floats and returned in a
one dimensional array. The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> is stripped from the data stream. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadListAsDoubleArray">
            <summary>
 Reads a list of values from the read buffer until an End condition is reached (unparsable character, a termination character, an End, or a GPIB End of transmission signal).
</summary><returns>
A one dimensional array of doubles.
</returns><remarks>
The array of doubles uses the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> for delimiting. The values read from the buffer are converted into doubles and returned in a
one dimensional array. The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> is stripped from the data stream. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadListAsStringArray">
            <summary>
 Reads a list of values from the read buffer until an End condition is reached (unparsable character, a termination character, an End, or a GPIB End of transmission signal).
</summary><returns>
A one dimensional array of strings.
</returns><remarks>
The array of strings uses the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> for delimiting. The values read from the buffer are converted into strings and returned in a
one dimensional array. The <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator"/> is stripped from the data stream. 
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsString">
            <summary>
Reads an IEEE Block as a string using a SeekToBlock value of <see langword="false"/>.
</summary><overloads><summary>
These methods read IEEE Blocks and convert them to strings.
</summary></overloads><returns>The IEEEBlock data is interpreted and returned as a string array.</returns><remarks>
 This method expects to find a hash '#' character as the first character in the read buffer. If it does not, it raises an exception. If it does, 
 it reads the IEEE 488.2 definite binary block from the read buffer. If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, 
 the read continues after the IEEE block and discards all data until an <b>End</b>, a GPIB End of transmission signal, condition is reached.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsString(System.Boolean)">
            <summary>
Reads an IEEE 488.2 definite binary block from the read buffer.
</summary><param name="seekToBlock">If this parameter is <see langword="true"/>, this method searches for the hash '#' character. Otherwise, the hash '#'
character must be the first character in the read buffer.</param><returns>The IEEEBlock data is interpreted and returned as a string array.</returns><remarks>
<para>This method reads an IEEE 488.2 definite binary block from the read buffer. If <paramref name="seekToBlock"/> parameter is 
<see langword="true"/>, this method reads the buffer until it finds the hash '#' character, which is the binary block header character. It then reads the 
the block.</para>
<para>If <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first character 
in the buffer. If the hash character is not the first character, an exception is raised. If it is, the method reads the IEEE 488.2 definite binary block from the 
read buffer.</para>
<para>In both cases, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an <b>End</b>, a GPIB End of transmission signal, condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsByteArray">
            <summary>
Reads an IEEE Block and converts it to an array of bytes using a SeekToBlock value of <see langword="false"/>.
</summary><overloads><summary>
These methods read IEEE Blocks and convert them to bytes.
</summary></overloads><returns>The IEEEBlock data is interpreted and returned as an array of bytes.</returns><remarks>
<para>Since the <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first 
character in the buffer. If the hash '#' character is not the first character, an exception is raised. If it is the first character, the method reads the IEEE 488.2 
definite binary block from the read buffer.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an <b>End</b>, a GPIB End of transmission signal, is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsByteArray(System.Boolean)">
            <summary>
 Reads an IEEE 488.2 definite binary block from the read buffer.
</summary><param name="seekToBlock">If this parameter is <see langword="true"/>, this method searches for the hash '#' character. Otherwise, the hash '#'
character must be the first character in the read buffer.</param><returns>The IEEEBlock data is interpreted and returned as an array of bytes.</returns><remarks>
<para>This method reads an IEEE 488.2 definite binary block from the read buffer. If <paramref name="seekToBlock"/> parameter is 
<see langword="true"/>, this method reads the buffer until it finds the hash '#' character, which is the binary block header character. It then reads the 
the block.</para>
<para>If <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first character 
in the buffer. If the hash character is not the first character, an exception is raised. If it is, the method reads the IEEE 488.2 definite binary block from the 
read buffer.</para>
<para>In both cases, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsInt16Array">
            <summary>
 Reads an IEEE Block and converts it to an array of shorts using a SeekToBlock value of <see langword="false"/>.
</summary><returns>The IEEEBlock data is interpreted and returned as an array of shorts.</returns><remarks>
<para>Since the <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first 
character in the buffer. If the hash '#' character is not the first character, an exception is raised. If it is the first character, the method reads the IEEE 488.2 
definite binary block from the read buffer.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsInt16Array(System.Boolean)">
            <summary>
 Reads an IEEE 488.2 definite binary block from the read buffer.
</summary><param name="seekToBlock">If this parameter is <see langword="true"/>, this method searches for the hash '#' character. Otherwise, the hash '#'
character must be the first character in the read buffer.</param><returns>The IEEEBlock data is interpreted and returned as an array of shorts.</returns><remarks>
<para>This method reads an IEEE 488.2 definite binary block from the read buffer. If <paramref name="seekToBlock"/> parameter is 
<see langword="true"/>, this method reads the buffer until it finds the hash '#' character, which is the binary block header character. It then reads the 
the block.</para>
<para>If <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first character 
in the buffer. If the hash character is not the first character, an exception is raised. If it is, the method reads the IEEE 488.2 definite binary block from the 
read buffer.</para>
<para>In both cases, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsInt32Array">
            <summary>
Reads an IEEE Block and converts it to an array of integers using a SeekToBlock value of <see langword="false"/>.
</summary><returns>The IEEEBlock data is interpreted and returned as an array of integers.</returns><remarks>
<para>Since the <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first 
character in the buffer. If the hash '#' character is not the first character, an exception is raised. If it is the first character, the method reads the IEEE 488.2 
definite binary block from the read buffer.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsInt32Array(System.Boolean)">
            <summary>
 Reads an IEEE 488.2 definite binary block from the read buffer.
</summary><param name="seekToBlock">If this parameter is <see langword="true"/>, this method searches for the hash '#' character. Otherwise, the hash '#'
character must be the first character in the read buffer.</param><returns>The IEEEBlock data is interpreted and returned as an array of integers.</returns><remarks>
<para>This method reads an IEEE 488.2 definite binary block from the read buffer. If <paramref name="seekToBlock"/> parameter is 
<see langword="true"/>, this method reads the buffer until it finds the hash '#' character, which is the binary block header character. It then reads the 
the block.</para>
<para>If <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first character 
in the buffer. If the hash character is not the first character, an exception is raised. If it is, the method reads the IEEE 488.2 definite binary block from the 
read buffer.</para>
<para>In both cases, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsSingleArray">
            <summary>
Reads an IEEE Block and converts it to an array of floating point numbers using a SeekToBlock value of <see langword="false"/>.
</summary><returns>The IEEEBlock data is interpreted and returned as an array of floats.</returns><remarks>
<para>Since the <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first 
character in the buffer. If the hash '#' character is not the first character, an exception is raised. If it is the first character, the method reads the IEEE 488.2 
definite binary block from the read buffer.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsSingleArray(System.Boolean)">
            <summary>
 Reads an IEEE 488.2 definite binary block from the read buffer.
</summary><param name="seekToBlock">If this parameter is <see langword="true"/>, this method searches for the hash '#' character. Otherwise, the hash '#'
character must be the first character in the read buffer.</param><remarks>
<para>This method reads an IEEE 488.2 definite binary block from the read buffer. If <paramref name="seekToBlock"/> parameter is 
<see langword="true"/>, this method reads the buffer until it finds the hash '#' character, which is the binary block header character. It then reads the 
the block.</para>
<para>If <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first character 
in the buffer. If the hash character is not the first character, an exception is raised. If it is, the method reads the IEEE 488.2 definite binary block from the 
read buffer.</para>
<para>In both cases, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsDoubleArray">
            <summary>
Reads an IEEE Block and converts it to an array of doubles using a SeekToBlock value of <see langword="false"/>.
</summary><returns>The IEEEBlock data is interpreted and returned as an array of doubles.</returns><remarks>
<para>Since the <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first 
character in the buffer. If the hash '#' character is not the first character, an exception is raised. If it is the first character, the method reads the IEEE 488.2 
definite binary block from the read buffer.</para>
<para>If the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para></remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ReadIeeeBlockAsDoubleArray(System.Boolean)">
            <summary>
 Reads an IEEE 488.2 definite binary block from the read buffer.
</summary><param name="seekToBlock">If this parameter is <see langword="true"/>, this method searches for the hash '#' character. Otherwise, the hash '#'
character must be the first character in the read buffer.</param><returns>The IEEEBlock data is interpreted and returned as an array of doubles.</returns><remarks>
<para>This method reads an IEEE 488.2 definite binary block from the read buffer. If <paramref name="seekToBlock"/> parameter is 
<see langword="true"/>, this method reads the buffer until it finds the hash '#' character, which is the binary block header character. It then reads the 
the block.</para>
<para>If <paramref name="seekToBlock"/> parameter is <see langword="false"/>, this method expects the '#' character to be the first character 
in the buffer. If the hash character is not the first character, an exception is raised. If it is, the method reads the IEEE 488.2 definite binary block from the 
read buffer.</para>
<para>In both cases, if the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush"/> property is <see langword="true"/>, any data after the IEEEBlock data is read and discarded 
until an End condition is reached.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UnbufferedRead(System.Int32)">
            <summary>
Synchronously reads the specified number of bytes from the instrument.
</summary><param name="count">The number of bytes to read from the instrument.</param><returns>A byte array containing data read from the instrument.</returns><remarks>
<para>This method bypasses the software I/O buffer and reads directly from the instrument. It does not return until an End condition occurs. 
To have an End condition, the requested number of bytes must have been read, the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> received, or an 
End signal received.</para>
<para>Only one synchronous read can occur at a time.</para>
</remarks><exception cref="T:System.ArgumentOutOfRangeException"><see langword="count"/> is negative.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UnbufferedWrite(System.Byte[])">
            <summary>
Writes a byte array and an End directly to an instrument.
</summary><overloads><summary>
These methods bypasses the software I/O buffer and writes all or part of a byte array and an End directly to an instrument.
</summary></overloads><param name="bytes">A byte array containing the data to write.</param><returns>The number of bytes written.</returns><remarks>
<para>This method bypasses the I/O buffer and writes directly to the instrument. It does not return until the transfer terminates.</para>
<para>Only one synchronous write can occur at one time.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UnbufferedWrite(System.Byte[],System.Boolean)">
            <summary>
Writes a byte array directly to an instrument. At the your option, appends an End to the array.
</summary><param name="bytes">A byte array containing the data to write.</param><param name="sendEnd">Whether to append an End to the array.</param><remarks>
<para>This method bypasses the I/O buffer and writes directly to the instrument. It does not return until the transfer terminates.</para>
<para>Only one synchronous write can occur at one time.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UnbufferedWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
Writes a portion of a byte array directly to an instrument.
</summary><param name="bytes">A byte array containing the data to write.</param><param name="index">The array position to start reading data from.</param><param name="count">The number of bytes to write.</param><remarks>
Writes directly to an instrument from a given byte array, beginning at a given index, for a given number of bytes.
<para>This method does not return until the transfer terminates. However, an End is automatically appended to the data.</para>
<para>Only one synchronous write can occur at one time.</para>
</remarks><exception cref="T:System.ArgumentException">The array length minus the <see langword="index"/> is less than the <see langword="count"/>.</exception><exception cref="T:System.ArgumentNullException"> <see langword="array"/> is <see langword="null"/>.</exception><exception cref="T:System.ArgumentOutOfRangeException"><see langword="index"/> or <see langword="count"/> is negative.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UnbufferedWrite(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
Writes a portion of a byte array directly to an instrument. Optionally appends an End to the array.
</summary><param name="bytes">A byte array containing the data to write.</param><param name="index">The starting point in the array where the read operation begins.</param><param name="count">The number of bytes to write.</param><param name="sendEnd">Whether an End command is appended to the data.</param><remarks>
Writes directly to an instrument from a given byte array, beginning at a given index, for a given number of bytes.
<para>This method does not return until the transfer terminates.</para>
<para>Only one synchronous write can occur at one time.</para>
</remarks><exception cref="T:System.ArgumentException">The array length minus the <see langword="index"/> is less than the <see langword="count"/>.</exception><exception cref="T:System.ArgumentNullException"> <see langword="array"/> is <see langword="null"/>.</exception><exception cref="T:System.ArgumentOutOfRangeException"><see langword="index"/> or <see langword="count"/> is negative.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UninstallServiceRequestHandler">
            <summary>
            This method uninstalls the VisaCom event handler and releases it reference to the object that
            services those requests.  It is up to the caller to release it reference to any listener objects.
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.ConvertCOMExceptionToVisaException(System.Runtime.InteropServices.COMException)">
            <summary>
            This method checks to see if the COMException is of type FACILITY_ITF.
            If not then we return the COMException.  If it is FACILITY_ITF then we try to 
            see if it is specifically the result of a bad VISA status code.  
            If it it will convert it to a VisaException otherwise we return the COMException.
            </summary>
            <param name="ex">The COMException to wrap.</param>
            <returns>
            Either a VisaException or the original COMException if the HRESULT
            does not map to a VISA error status code.
            </returns>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal the event handler calls that are issued as a result of a ServiceRequest event.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Gpib">
            <summary>
Returns an instance of a DirectIO.GpibInstr object if the underlying session interface type is GPIB, otherwise it returns null..
</summary><remarks>
The connect string for GPIB is GPIB[<em>board</em>]::<em>primary address</em>[::<em>secondary address</em>][::INSTR]] where the 
italicized items are user supplied and the bracketed items are optional.
<para>Returns <see langword="null"/> if the DirectIO object does not use a GPIB interface.</para>
<para>For more information about instrument connect strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connection Strings</a>.
</para>
</remarks><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Serial">
            <summary>
Returns an instance of a DirectIO.SerialInstr object if the underlying session interface type is Serial, otherwise it returns null.
</summary><remarks>
The connect string for Serial is ASRL[<em>COM port#</em>][::INSTR]] where the italicized items are user supplied and the bracketed items are optional.
<para>Returns <see langword="null"/> if the DirectIO object is not a serial interface.</para>
</remarks><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Tcpip">
            <summary>
Returns an instance of a DirectIO.TcpipInstr object if the underlying session interface type is TCPIP, otherwise it returns null.
</summary><remarks>
<para>The connect string for Tcpip is TCPIP[<em>board</em>]::<em>host address</em>[::<em>LAN instrument name</em>][::INSTR]] where the italicized 
items are user supplied and the bracketed items are optional.</para>
<para>Returns <see langword="null"/> if the DirectIO object is not a TCPIP interface.</para>
<para>For more information about instrument connect strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connection Strings</a>.
</para>
</remarks><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Socket">
            <summary>
            Returns an instance of a DirectIO.TcpipSocket object if the underlying session interface type is TCPIP and resource class is SOCKET, otherwise it returns null.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Usb">
            <summary>
Returns an instance of a DirectIO.UsbInstr object if the underlying session interface type is USB, otherwise it returns null.
</summary><remarks>
<para>The connect string for USB is USB[<em>board</em>]::<em>manufacturer ID</em>::<em>model code</em>::<em>instrument serial 
number</em>[::USB Interface Number][::INSTR] where the italicized items are user supplied and the bracketed items are optional.</para>
<para>For more information about instrument connect strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connection Strings</a>.
</para>
</remarks><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.HardwareInterfaceType">
            <summary>
Gets the hardware interface type.
</summary><returns>This property returns one of the following, GPIB, VXI, GPIBVXI, ASRL, TCPIP, or <see langword="null"/>
if the <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object is not one of these interface types.
</returns><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Locked">
            <summary>
Gets a boolean value indicating whether the session is locked or not.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Address">
            <summary>
Gets the resource name for the current instrument.
</summary><remarks>
The resource name is the same as connection string used to address the instrument.
<example><code name="visual basic">
Dim MyArb as New DirectIO(GPIB0::13::INSTR)
<br></br>or<br></br>
Dim MyDMM as New DirectIO(TCPIP0::jetscrm3::GPIB0,22::INSTR)
</code></example>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.Timeout">
            <summary>
Gets or sets the I/O timeout value for the session; set in milliseconds.
</summary><remarks>
The time out value is the amount of time a call to an instrument or session waits for a response before stopping and raising an exception.
The timeout should not be confused with the waitForLockTimeout value that is used when the instrument object is instantiated.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.LastStatus">
            <summary>
Gets the return value of the last method call for the current session.
</summary><remarks>
<para>If you are programming with Visual Basic, this property is useful because it holds negative, positive, and non-error return values.</para>
<para>If two DirectIO sessions try to lock an instrument, one achieves an exclusive lock and the other times out in the attempt. This 
property holds the timeout error in such a case.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><seealso href="ms-help://MS.VSCC/MS.MSDNVS/vblr7/html/vaproLastDLLError.htm"></seealso>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter">
            <summary>
Gets or sets the character used to terminate read operations and some serial write operations.
</summary><value>The default termination character is <see langword="\n"/> or <see langword="Chr(10)"/> for Visual Basic.</value><remarks>
<para>This property is used to set the value of the read terminator and the write terminator for some serial write operations. You must use the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/> property to enable or disable the use of the TerminationCharacter.</para>
<para>When writing to an instrument over a serial interface with the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.EndOut"/> property set to TermChar, it is possible to 
inadvertently send multiple write terminations if you use one of the <see langword="WriteLine"/> overloads and the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/> string contains
the TerminationCharacter.  In this case, use one of the <see langword="Write"/> overloads instead.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception><seealso cref="M:Agilent.TMFramework.InstrumentIO.DirectIO.Write(System.String)">Write</seealso><seealso cref="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine(System.String)">WriteLine</seealso><seealso cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine"/><seealso cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled"/>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacterEnabled">
            <summary>
Gets or sets whether the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> is used.
</summary><value>The default is <see langword="true"/> for addresses corresponding to ASRL (Serial) and SOCKET devices.  It is <see langword="false"/> otherwise.</value><remarks>
Some instruments require line termination characters to properly complete read and write operations.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.AutoFlush">
            <summary>
Gets or sets whether <see cref="M:Agilent.TMFramework.InstrumentIO.DirectIO.FlushWrite">FlushWrite</see> is called after every write.
</summary><value>The default value is <see langword="true"/>.</value><remarks>
<para>AutoFlush is automatically enabled. It flushes the write buffer and sends a  <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> after a write 
operation. If the AutoFlush property is set to false, make sure you send an END by calling WriteLine() before calling Dispose. Before the 
underlying VISA session is closed, both the read and write buffers are flushed. </para>
<para>When AutoFlush is set to false, a Write() method will not send END (EOI and/or a termination character depending on the physical 
interface). If you send a command using Write() e.g. Write("*RST") and then you call Dispose(), *RST is sent to the instrument 
without an END. This puts *RST in the instrument's input buffer but doesn't terminate the command string. When the next properly 
terminated command is sent to the instrument it is appended to *RST and the resulting command will be invalid.</para>
</remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.NewLine">
            <summary>
Gets or sets the newline sequence used by the <see cref="M:Agilent.TMFramework.InstrumentIO.DirectIO.WriteLine">WriteLine</see> methods.
</summary><value>The string used to generate a newline. The default is <see langword="\n"/>.</value>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.ListSeparator">
            <summary>
Gets or sets the list separators (or delimiters) used by the <see cref="M:ReadList"/> and <see cref="M:WriteList"/> methods.
</summary><value>The default is a "," (comma).</value><remarks><para>The list separator is not limited to a single value. It can be a set of different individual values. 
For example, it could be set to ",;-:". A comma, semi-colon, dash, or colon that was encountered within a data 
stream would be treated as a separating character.</para>
<para>If a value can be both a part of a data stream from the instrument and a separator, such as a space, a comma, or a number, 
it should not be used as a list separator. This is because two list separators in a row cause an exception to be thrown. 
For example, if a comma was the designated separator and the data stream was {13,34,56,89,,9}, the two commas 
between 89 and 9 would throw an exception.</para></remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.InstrumentByteOrder">
            <summary>
Gets or sets whether the byte order sent to or received from the instrument is big endian or little endian.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The object has been closed or disposed.</exception>
        </member>
        <member name="E:Agilent.TMFramework.InstrumentIO.DirectIO.ServiceRequest">
            <summary>
This event is fired when the instrument requests service.
</summary><remarks>
<para>Note: There are minor limitations to the handling of SRQs (service requests) in console applications. 
In Windows Forms applications, messaging is handled automatically and the use of SRQs is fully supported. 
In console applications, the New Project Wizards create console applications that use the STAThread attribute. When the STAThread
attribute is active, Windows messages cannot be processed and the SRQ event cannot be received. The workaround is 
to manually service messages when using a console application or comment out the STAThread attribute. It is 
recommended that you experiment with disabling STAThread to ensure you are getting the correct results.
</para>
<para>Note: Also be aware that SRQ event handlers get called on a different thread than the one used to create the 
DirectIO object. This can cause intermittent crashes if you manipulate a Windows Forms control on a different thread than the one
the control was created on. Use the SynchronizingObject property on DirectIO to inform the DirectIO class to fire the ServiceRequest event
on the same thread that created the control or Form used to set the SynchronizingObject property.</para>
<para>
If you choose to receive ServiceRequest events on the separate thread (created by VISA), any exceptions 
that occur in the handler are ignored. This can result in unpredictable behavior in your program. If the event handler 
does anything that might throw an exception, you should wrap your event handling code in a try/catch block and at least report 
the error in your catch block.</para>
<para><b>Caution:</b> Do not call DirectIO.Dispose from your ServiceRequest event handler.  Dispose detects this and throws an 
InvalidOperationException in order to prevent a race condition. Also, do not unsubscribe to the ServiceRequest event handler 
in the ServiceRequest event handling code. This will also throw an InvalidOperationException for the same reason already noted.
</para>
<example><code>
using System;
using System.Threading;
using Agilent.TMFramework;
using Agilent.TMFramework.InstrumentIO;

namespace Agilent.TMFramework.Examples.Srq
{
    class SrqTest
    {
        static DirectIO s_dmm;
        static bool s_srqReceived;

        [MTAThread]
        static void Main(string[] args)
        {
            s_dmm = new DirectIO("GPIB3::22");
            s_dmm.ServiceRequest += new ServiceRequestEventHandler(SrqHandler);

            s_dmm.WriteLine("*CLS");
            s_dmm.ReadStatusByte();

            // Enable events by setting a bit in the 34401 Status Byte Enable Register
            s_dmm.WriteLine("*SRE {0}", Math.Pow(2, 5));
            Timing.Delay(100);

            // Cause the DMM to fire a Service Request (SRQ) event when it receives a
            // bad command by setting a bit in the Standard Event Enable Register
            s_dmm.WriteLine("*ESE {0}", Math.Pow(2, 5));
            Timing.Delay(100);

            // Send an invalid command that will cause a SRQ.
            // This will also cause the 34401 to beep.
            s_dmm.WriteLine(":INVALID:CMD");

            DateTime start = DateTime.Now;
            while (!s_srqReceived)
            {
                // Yield to prevent 100% CPU consumption
                Thread.Sleep(100);

                // Wait a max of 30 seconds
                DateTime current = DateTime.Now;
                TimeSpan span = current - start;
                if (span.Seconds &gt; 30) break;
            }

            Console.WriteLine("Press enter to quit");
            Console.ReadLine();
        }

        static void SrqHandler(object sender, ServiceRequestEventArgs e)
        {
            try
            {
                s_srqReceived = true;
                Console.WriteLine("Got SRQ 0x{0:x4}", e.StatusByte);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
}
</code></example>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">An attempt is made to subscribe to this event where the DirectIO object has been closed or disposed.</exception><exception cref="T:System.NotSupportedException">The session is of type SOCKET, which does not support the SRQ event.</exception>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr">
            <summary>
Provides information and limited control of the GPIB INSTR session associated with a DirectIO object.
</summary><remarks>For more information about instrument connect strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connection Strings</a>.
</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.SendLocalLockout">
            <summary>
 Disables the front panel controls of the instrument.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.SendGoToLocal">
            <summary>
 Enables the front panel of the instrument and passes control to it.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.ControlRen(Agilent.TMFramework.InstrumentIO.VisaRenControl)">
            <summary>
Controls the state of the GPIB REN interface line and, optionally, the remote/local state of the instrument.
</summary><param name="mode">Assert, Deassert, GoToLocalAndDeassert, AssertAndAddress, LocalLockOut, AddressAndLocalLockOut, 
and AddressAndGoToLocal.</param><remarks>
<para>To enable or disable the REN interface line, toggle between Assert and Deassert.</para>
<para>To disable the REN interface line and pass control to the front panel, pass the GoToLocalAndDeassert mode.</para>
<para>To enable the REN interface line and open an instrument session, pass the AssertAndAddress mode.</para>
<para>If the instrument is in remote mode, you can disable the front panel and prevent it from returning to local mode by 
passing the LocalLockOut mode.</para>
<para>To open an instrument session and disable the front panel (also prevents the front panel from returning to local mode), pass the AddressAndLocalLockOut mode.</para>
<para>To open an instrument session and go to local mode, pass the AddressAndGoToLocal mode. This mode always forces a local mode 
regardless of the remote mode.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.HardwareInterfaceNumber">
            <summary>
Gets the board number of the GPIB interface.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.PrimaryAddress">
            <summary>
Gets the primary address of the GPIB instrument.
</summary><value>
The primary address can range from 00 to 30.
</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.SecondaryAddress">
            <summary>
Gets the secondary address of the GPIB instrument.
</summary><value>
The secondary address can range from 00 to 30.
</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.RenState">
            <summary>
Gets the state of the Remote ENable (REN) line of the GPIB interface.
</summary><value>
The states of the the RENLine are Asserted, Unasserted, or Unknown.
</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.RepeatAddressing">
            <summary>
Gets the repeat addressing value which is always set to <see langword="true"/> and cannot be changed.
</summary><value>Repeat addressing is always enabled.</value><remarks>
With repeat addressing enabled, the address remains the same after each read or write operation.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.GpibInstr.Unaddressing">
            <summary>
Gets the instrument (UNT and UNL) after each read or write operation. Default is disabled and it cannot be changed.
</summary><value>Unaddressing is always disabled.</value><remarks>
With unaddressing disabled, the address is never reset after each read or write operation.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr">
            <summary>
Provides information and limited control of the Serial INSTR session associated with a DirectIO object.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.SetBufferSize(Agilent.TMFramework.InstrumentIO.VisaIoBuffers,System.Int32)">
            <summary>
 Sets the size of the read and/or write buffer for serial communication.
</summary><param name="buffers">Possible values are In, Out, or Both.</param><param name="size">Expressed in bytes.</param><remarks>The <paramref name="buffers"/> parameter is used to select which serial communication buffer is affected by this method.
</remarks><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="size"/> is less than zero.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.Flush">
            <summary>
 Both buffers are cleared by reading or writing the data.
</summary><overloads>
<summary>
These methods clear the read and write buffers using a variety of approaches.
</summary>
</overloads><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.Flush(Agilent.TMFramework.InstrumentIO.VisaIoBuffers)">
            <summary>
 Clears the read and/or write buffer by reading or writing the data.
</summary><param name="buffers">Possible values are In, Out, or Both.</param><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.Flush(Agilent.TMFramework.InstrumentIO.VisaIoBuffers,System.Boolean)">
            <summary>
 Clears the read and/or write buffer by reading, writing, or discarding the data.
</summary><param name="buffers">Possible values are In, Out, or Both.</param><param name="discard">Whether the buffers are cleared by discarding the data or doing standard I/O.</param><remarks>
The buffer specified in <paramref name="buffers"/> is cleared. Whether the data in the specified buffer(s) is discarded or cleared by doing
standard I/O is set with the <paramref name="discard"/> parameter.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.BytesAvailable">
            <summary>
Gets the number of bytes available in the global receive buffer. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.BaudRate">
            <summary>
Gets or sets the baud rate of the interface.
</summary><value> Baud rate is represented as an unsigned 32-bit integer so that any baud rate can be used. However, other limitations usually require a commonly 
used rate such as 1200, 2400, or 9600 baud. 
</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.DataBits">
            <summary>
Gets or sets the number of data bits contained in each frame (from 5 to 8).
</summary><remarks> 
The data bits for each frame are located in the low-order bits of every byte stored in memory.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.ClearToSendState">
            <summary>
Gets the current status of the clear to send status line.
</summary><value>Possible values are Asserted, Unasserted, and Unknown.</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.DataCarrierDetectState">
            <summary>
Gets the current status of the data carrier detect (DCD) status line.
</summary><value>Possible values are Asserted, Unasserted, and Unknown.</value><remarks>
<para>The DCD signal is often used by modems to indicate the detection of a carrier (remote modem) on the telephone line.</para>
<para>The DCD signal is also known as Receive Line Signal Detect (RLSD).</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.DataSetReadyState">
            <summary>
Gets the current status of the data set ready (DSR) status line.
</summary><value>Possible values are Asserted, Unasserted, and Unknown.</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.DataTerminalReadyState">
            <summary>
Gets or sets the Data Terminal Ready (DTR) output signal.
</summary><value>Possible values are Asserted, Unasserted, and Unknown.</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.EndIn">
            <summary>
Gets or sets the terminator for serial read operation.
</summary><value>Possible values are None, TermChar, LastBit, and Break. </value><remarks>
<para>If value is set to None, the read terminates when all of the requested data is received (or an error occurs).</para>
<para>If value is set to TermChar, the read terminates as soon as the character in the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> property is received.</para>
<para>If the value is set to LastBit, the read terminates as soon as a character arrives with its last bit set.</para>
<para>Finally, the Break setting is not valid for this version of DirectIO.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.EndOut">
            <summary>
Gets or sets the terminator for serial write operation.
</summary><value>Possible values are None, TermChar, LastBit, and Break.</value><remarks><para>If value is set to None, the write sends the data with nothing appended to it.</para>
<para>If value is set to TermChar, the write terminates by sending the character in the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.TerminationCharacter"/> property.</para>
<para>If the value is set to LastBit, the write terminates by sending the last byte with its last bit set.</para>
<para>Finally, if the value is set to Break, the write terminates by sending a Break.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.FlowControl">
            <summary>
Gets or sets the serial flow control mode.
</summary><value>Possible values are None, XonXoff, RtsCts, DtrDsr, RtsCts | XonXoff, and DtrDsr | XonXoff </value><remarks>
<para>If the value is set to None, the transfer mechanism does not use flow control and buffers on both sides of the connection are assumed to be large 
enough to hold all data transferred.</para>
<para>If the value is set to XonXoff, the transfer mechanism uses the value of the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.XonCharacter"/> property and the value of the 
<see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.XoffCharacter"/> property to perform flow control. The transfer mechanism controls input flow by sending XOFF when the receive 
buffer is nearly full, and it controls the output flow by suspending transmission when XOFF is received.</para>
<para>If the value is set to RtsCts, the transfer mechanism uses the RTS (Request to Send) output signal (see <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.RequestToSendState"/>) 
and the CTS (Clear to Send) input signal (see <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.ClearToSendState"/>) to perform flow control. The transfer mechanism controls input flow by 
unasserting the RTS signal when the receive buffer is nearly full, and it controls output flow by suspending the transmission when the CTS signal is unasserted.</para>
<para>If the value is set to DtrDsr, the transfer mechanism uses the DTR (Data Terminal Ready) output signal (see <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.DataTerminalReadyState"/>) 
and the DSR (Data Set Ready) input signal (see <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.DataSetReadyState"/>) to perform flow control. The transfer mechanism controls input 
flow by unasserting the DTR signal when the receive buffer is nearly full, and it controls output flow by suspending the transmission when the DSR signal is 
unasserted.</para>
<para><b>Caution:</b> If the value is set to RtsCts | XonXoff or to DtrDsr | XonXoff, these combinations may not be supported by all serial interfaces and/or 
operating systems.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.Parity">
            <summary>
 Gets or sets the parity of the transmitted frame.
</summary><value>Possible values are None, Odd, Even, Mark, and Space.</value><remarks>
A parity value of None means no parity is used in the communication. A parity value
of Odd means the parity is always an odd number. A parity value of Even means the parity is always an even number. A parity value
of Mark means the parity bit exists and always equals one. A parity value of Space means the parity bit exists and always equals zero.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.RingIndicatorState">
            <summary>
Gets the current state of the Ring Indicator (RI) input signal.
</summary><value>Possible values are Asserted, Unasserted, and Unknown.</value><remarks>
The RI signal is often used by modems to indicate that the telephone line is ringing.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.RequestToSendState">
            <summary>
 Gets or sets the Request To Send (RTS) output signal.  
</summary><value>Possible values are Asserted, Unasserted, and Unknown.</value><remarks>
<para>When the <see cref="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.FlowControl"/> property is set to RtsCts, this property is ignored when changed. However, it can still be read to determine whether 
the background flow control is asserting or unasserting the signal.</para>
<para><b>Note:</b> Setting this property to the Unknown value raises a VISAException.</para>
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.StopBits">
            <summary>
 Gets or sets the number of stop bits used to indicate the End of a frame.
</summary><value>Possible values are One, OneAndAHalf, or Two.</value><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.ReplacementCharacter">
            <summary>
Gets or sets the character used to replace incoming characters that arrive with errors.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.XonCharacter">
            <summary>
 Gets or sets the value of the XON character used for XON/XOFF flow control (both directions).
</summary><remark>
 If XON/XOFF flow control (software handshaking) is not being used, the value of this attribute is ignored.
</remark><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.SerialInstr.XoffCharacter">
            <summary>
  Gets or sets the value of the XOFF character used for XON/XOFF flow control (both directions).
</summary><remark>
  If XON/XOFF flow control (software handshaking) is not being used, the value of this attribute is ignored.
</remark><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipInstr">
            <summary>
Provides information and limited control of the TCPIP INSTR session associated with a DirectIO object.
</summary><remarks>For more information about instrument connect strings, see 
<a href="../Agilent.TMDirectIO/ConnectionStrings.htm">Connection Strings</a>.
</remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipInstr.IpAddress">
            <summary>
 The TCPIP address of this session.
</summary><remarks>
Gets the TCPIP address of the instrument to which the session is connected. This string is formatted using standard internet dot notation.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipInstr.HostName">
            <summary>
 Gets the host name of the instrument.
</summary><remarks>
If no host name is available, this property returns an empty string.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipInstr.DeviceName">
            <summary>
 Gets the LAN instrument name used during connection.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.ObjectDisposedException">The associated <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> object has been closed or disposed.</exception>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket">
            <summary>
            Provides information and limited control of the TCPIP SOCKET session associated with a DirectIO object. 
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.SetBufferSize(Agilent.TMFramework.InstrumentIO.VisaIoBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for tcpip socket communication.
            </summary>
            <param name="buffers">Specifies which buffer.</param>
            <param name="size">Size of buffer in bytes.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.Flush">
            <summary>
            Both buffers are cleared by reading or writing the data.
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.Flush(Agilent.TMFramework.InstrumentIO.VisaIoBuffers)">
            <summary>
            Clears the specified read and/or write buffer by reading or writing the data. 
            </summary>
            <param name="buffers">Specifies which buffers to flush.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.Flush(Agilent.TMFramework.InstrumentIO.VisaIoBuffers,System.Boolean)">
            <summary>
            Clears the read and/or write buffer by reading, writing, or discarding the data. 
            </summary>
            <param name="buffers">Specifies which buffers to flush.</param>
            <param name="discard">Whether the buffers are cleared by discarding the data or doing standard I/O.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.HostName">
            <summary>
            Gets the host name of the instrument.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.IpAddress">
            <summary>
            The TCP/IP address of the instrument. 
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.Port">
            <summary>
            Gets the TCP/IP port used by this session.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.KeepAlive">
            <summary>
            Gets or sets whether to send keep-alive packets.
            </summary>
            <remarks>
            An application can request that a TCP/IP provider enable the use of keep-alive packets on TCP connections by setting this property to true.  If a connection is dropped as a result of keep-alives, the error code VI_ERROR_CONN_LOST is returned to current and subsequent I/O calls on the session.
            </remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.TcpipSocket.NoDelay">
            <summary>
            Specifies whether or not to use the Nagle algorithm.  
            </summary>
            <remarks>
            The Nagle algorithm is disabled when this property is set to true.  The Nagle algorithm improves network performance by buffering <b>send</b> data until a full-size packet can be sent.  This property is enabled by default to verify that synchronous writes get flushed immediately.
            </remarks>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr">
            <summary>
Provides information and limited control of the USB INSTR session associated with a DirectIO object.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.SendLocalLockout">
            <summary>
Disables the front panel controls of the device. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.SendGoToLocal">
            <summary>
Enables the front panel of the device and passes control to it. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.ControlRen(Agilent.TMFramework.InstrumentIO.VisaRenControl)">
            <summary>
Controls the state of the GPIB REN interface line and, optionally, the remote/local state of the device. 
</summary><param name="mode">Assert, Deassert, GoToLocalAndDeassert, AssertAndAddress, LocalLockOut, AddressAndLocalLockOut, 
and AddressAndGoToLocal.</param><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.Is4882Compliant">
            <summary>
Indicates whether or not the instrument supports IEEE 488.2 commands such as *IDN?. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.ManufacturerID">
            <summary>
Gets the manufacturer ID number of the USB device. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.ManufacturerName">
            <summary>
Gets the manufacturer name of the USB device. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.ModelCode">
            <summary>
Gets the model number of the USB device. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.ModelName">
            <summary>
Gets the model name of the USB device. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.HardwareInterfaceNumber">
            <summary>
Gets the board number of the USB interface. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.UsbInterfaceNumber">
            <summary>
Gets the USB interface number which indicates whether the USB session is with a host instrument (interface 0) or
a sub-addressable instrument, if any, within the host instrument. 
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.DirectIO.UsbInstr.UsbSerialNumber">
            <summary>
Gets the serial number associated with the USB instrument.
</summary><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">The underlying VISA library returns a failed status code.</exception><exception cref="T:System.Runtime.InteropServices.COMException">The underlying VISACom library returns a failure HRESULT.</exception><exception cref="T:System.ObjectDisposedException">The associated DirectIO object has been closed or disposed.</exception>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.InstrumentByteOrder">
            <summary>
Specifies the byte order of data sent to or received from an instrument.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.InstrumentByteOrder.LittleEndian">
            <summary>
Specifies that the instrument data format is little endian.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.InstrumentByteOrder.BigEndian">
            <summary>
Specifies that the instrument data format is big endian.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.ServiceRequestEventHandler">
            <summary>
Represents the method that will handle the service request event.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.ServiceRequestEventArgs">
            <summary>
Provides the value of the status byte that was read to determine if the ServiceRequest
was associated with a particular DirectIO object.  
</summary><remarks>
The DirectIO class reads the status byte to determine if a particular service request
is associated with the DirectIO session.  If the service request is associated with
the DirectIO object then the 0x40 bit in the status byte will be set.  This class
preserves the exact value of the status byte at the point in time that the DirectIO
class read the status byte.
</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.ServiceRequestEventArgs.#ctor(System.Int16)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.ServiceRequestEventArgs"/> with the
status byte value read by the <see cref="T:Agilent.TMFramework.InstrumentIO.DirectIO"/> class to determine if the
service request was associated with the DirectIO session.
</summary><param name="statusByte">The instrument's status byte.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.ServiceRequestEventArgs.StatusByte">
            <summary>
The value of the instrument's status byte at the point when DirectIO read the status
byte to determine if the service request was associated with the DirectIO session.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.IInstrAttributes">
            <summary>Attributes that are common to all INSTR resource types.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IInstrAttributes.InterfaceType">
            <summary>The type of interface used by the INSTR resource such as ASRL, GPIB, TCPIP, and so forth.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IInstrAttributes.InterfaceNumber">
            <summary>The interface number used by the INSTR resource such as ASRL1, GPIB0, TCPIP0, and so forth.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IInstrAttributes.TulipInterfaceName">
            <summary>The name of the Agilent TULIP interface.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.IGpibInstrAttributes">
            <summary>Attributes that are common to all GPIB INSTR resource types.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IGpibInstrAttributes.PrimaryAddress">
            <summary>The GPIB primary address. For example, 1 in GPIB0::1::2::INSTR.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IGpibInstrAttributes.SecondaryAddress">
            <summary>The GPIB secondary address. For example, 2 in GPIB0::1::2::INSTR.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes">
            <summary>Attributes that are common to all VXI INSTR resource types.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes.MainframeLogicalAddress">
            <summary>The logical address of the associated VXI mainframe.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes.LogicalAddress">
            <summary>The logical address of the VXI instrument within the VXI mainframe.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes.SlotNumber">
            <summary>The slot number of the VXI instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes.DeviceClass">
            <summary>The device class of the VXI instrument. For example, Message, Register, etc.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes.ManufacturerName">
            <summary>The name of the manufacturer of the VXI instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes.ModelName">
            <summary>The model name of the VXI instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IVxiInstrAttributes.ModelDescription">
            <summary>A short description of the VXI instrument.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.IGpibVxiInstrAttributes">
            <summary>Attributes that are common to all GPIB-VXI INSTR resource types.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.ITcpipInstrAttributes">
            <summary>Attributes that are common to all TCPIP INSTR resource types.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.ITcpipInstrAttributes.IpAddress">
            <summary>The IP address of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.ITcpipInstrAttributes.HostName">
            <summary>The host name of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.ITcpipInstrAttributes.DeviceName">
            <summary>The device name of the TCPIP.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.ITcpipInstrAttributes.InterfaceProtocol">
            <summary>LAN instruments can use either the SICL-LAN or VXI-11 protocols.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.ITcpipInstrAttributes.RemoteInterfaceType">
            <summary>Indicates what the actual interface type is on the remote end.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes">
            <summary>Attributes that are common to all USB INSTR resource types.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes.Is4882Compliant">
            <summary>Indicates whether or not the associated instrument is IEEE 488.2 compliant or not.
            This is useful for determining if the instrument implements the *IDN? query. IEEE 488.2
            compliant instruments implement this query.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes.ManufacturerID">
            <summary>The id of the manufacturer of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes.ManufacturerName">
            <summary>The name of the manufacturer of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes.ModelCode">
            <summary>The model number of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes.ModelName">
            <summary>The model name of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes.UsbInterfaceNumber">
            <summary>The interface number associated with the VISA resource name. For example, 0 in USB0.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.IUsbInstrAttributes.UsbSerialNumber">
            <summary>The serial number of the USB instrument. Every instrument has a unique USB serial number 
            that identifies it on the Universal Serial Bus.
            </summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes">
            <summary>
            Abstract base class to store information associated with a VISA INSTR resource types.
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes.#ctor(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType,System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="interfaceType">The VISA interface type.</param>
            <param name="interfaceNumber">The VISA interface (or board) number.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes.ResourceName">
            <summary>The VISA resource name associated with this set of INSTR attributes.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes.ExpandedResourceName">
            <summary>The full, expanded VISA resource name. For example, the expanded resource
            name for GPIB0::7 is GPIB0::7::INSTR.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes.Alias">
            <summary>The first VISA alias associated with this set of INSTR attributes.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes.InterfaceType">
            <summary>The type of interface used by the INSTR resource such as ASRL, GPIB, TCPIP, etc.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes.InterfaceNumber">
            <summary>The interface number used by the INSTR resource such as ASRL1, GPIB0, TCPIP0, etc.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.InstrAttributes.TulipInterfaceName">
            <summary>The name of the Agilent TULIP interface.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.AsrlInstrAttributes">
            <summary>Attributes that are common to all ASRL INSTR resource types.</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.AsrlInstrAttributes.#ctor(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType,System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="interfaceType">The VISA interface type.</param>
            <param name="interfaceNumber">The VISA interface (or board) number.</param>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes">
            <summary>Attributes that are common to all GPIB INSTR resource types.</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.#ctor(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType,System.Int32)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="interfaceType">The VISA interface type.</param>
            <param name="interfaceNumber">The VISA interface (or board) number.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.PrimaryAddress">
            <summary>The GPIB primary address. For example, 1 in GPIB0::1::2::INSTR.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.SecondaryAddress">
            <summary>The GPIB secondary address. For example, 2 in GPIB0::1::2::INSTR.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.IpAddress">
            <summary>The IP address of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.HostName">
            <summary>The host name of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.DeviceName">
            <summary>The device name for this INSTR resource.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.InterfaceProtocol">
            <summary>LAN instruments can use either the SICL-LAN or VXI-11 protocols.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibInstrAttributes.RemoteInterfaceType">
            <summary>Indicates what the actual interface type is on the remote end.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes">
            <summary>Attributes that are common to all VXI INSTR resource types.</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.#ctor(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType,System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="interfaceType">The VISA interface type.</param>
            <param name="interfaceNumber">The VISA interface (or board) number.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.MainframeLogicalAddress">
            <summary>The logical address of the associated VXI mainframe.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.LogicalAddress">
            <summary>The logical address of the VXI instrument within the VXI mainframe.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.SlotNumber">
            <summary>The slot number of the VXI instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.DeviceClass">
            <summary>The device class of the VXI instrument. For example, Message, Register, and so forth.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.ManufacturerName">
            <summary>The name of the manufacturer of the VXI instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.ModelName">
            <summary>The model name of the VXI instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiInstrAttributes.ModelDescription">
            <summary>A short description of the VXI instrument.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.GpibVxiInstrAttributes">
            <summary>Attributes that are common to all GPIB-VXI INSTR resource types.</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.GpibVxiInstrAttributes.#ctor(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType,System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="interfaceType">The VISA interface type.</param>
            <param name="interfaceNumber">The VISA interface (or board) number.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibVxiInstrAttributes.PrimaryAddress">
            <summary>The GPIB primary address. For example, 1 in GPIB0::1::2::INSTR.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibVxiInstrAttributes.SecondaryAddress">
            <summary>The GPIB secondary address. For example, 2 in GPIB0::1::2::INSTR.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.GpibVxiInstrAttributes.ParentInterfaceNumber">
            <summary>The interface number of the parent.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.TcpipInstrAttributes">
            <summary>Attributes that are common to all TCPIP INSTR resource types.</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.TcpipInstrAttributes.#ctor(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType,System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="interfaceType">The VISA interface type.</param>
            <param name="interfaceNumber">The VISA interface (or board) number.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.TcpipInstrAttributes.IpAddress">
            <summary>The IP address of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.TcpipInstrAttributes.HostName">
            <summary>The host name of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.TcpipInstrAttributes.DeviceName">
            <summary>The device name for this INSTR resource.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.TcpipInstrAttributes.InterfaceProtocol">
            <summary>LAN instruments can use either the SICL-LAN or VXI-11 protocols.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.TcpipInstrAttributes.RemoteInterfaceType">
            <summary>Indicates what the actual interface type is on the remote end.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes">
            <summary>Attributes that are common to all USB INSTR resource types.</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.#ctor(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType,System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="interfaceType">The VISA interface type.</param>
            <param name="interfaceNumber">The VISA interface (or board) number.</param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.UsbInterfaceNumber">
            <summary>The interface number associated with the VISA resource name. For example, 0 in USB0.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.UsbSerialNumber">
            <summary>The serial number of the USB instrument. Every instrument has a unique USB serial number 
            that identifies it on the Universal Serial Bus.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.ManufacturerID">
            <summary>The id of the manufacturer of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.ModelCode">
            <summary>The model number of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.ManufacturerName">
            <summary>The name of the manufacturer of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.ModelName">
            <summary>The model name of the USB instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.Is4882Compliant">
            <summary>Indicates whether or not the associated instrument is IEEE 488.2 compliant or not.
            This is useful for determining if the instrument implements the *IDN? query. IEEE 488.2
            compliant instruments implement this query.
            </summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.IpAddress">
            <summary>The IP address of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.HostName">
            <summary>The host name of the LAN gateway or of the instrument.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.DeviceName">
            <summary>The device name for this INSTR resource.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.InterfaceProtocol">
            <summary>LAN instruments can use either the SICL-LAN or VXI-11 protocols.</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.UsbInstrAttributes.RemoteInterfaceType">
            <summary>Indicates what the actual interface type is on the remote end.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder">
            <summary>
The InstrumentFinder class is a wrapper around the functionality exposed by VISA's 
default resource manager, and the function viFindRsrc and viFindNext. This class can be 
used to discover which instruments are available locally and those that have been configured 
using the Agilent IO Libraries configuration utility. The InstrumentFinder can also be used 
to get information about particular VISA resource names such as the IP address of a remote 
GPIB device or LAN instrument.
</summary><remarks>
Since the InstrumentFinder holds open a default resource manager session, you can close 
that session explicitly by calling Dispose.
</remarks><example>
<code>
using System;
using Agilent.TMFramework.InstrumentIO.Discovery;

class App
{
    static void Main()
    {
        // The using statement handles disposing of the InstrumentFinder
        // when we are done with it.
        using (InstrumentFinder finder = new InstrumentFinder())
        {
            string searchExpr = "GPIB[3-6]?*INSTR";
            string[] resourceNames = finder.FindResources(searchExpr);
            foreach (string name in resourceNames)
            {
                Console.WriteLine("Found resource name: {0}", name);
            }
            
            InstrAttributes[] attributes = finder.GetInstrAttributes(resourceNames);
            foreach (InstrAttributes attr in attributes)
            {
                Console.WriteLine("Interface type is: {0}", attr.InterfaceType);
            }
        }
    }
}
</code>
</example>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.#ctor">
            <summary>
Creates a new instance of the InstrumentFinder class.
</summary><remarks>
The InstrumentFinder wraps an instance of the VISA default resource manager. The first 
time a default resource manager is created, it dynamically finds resources. Subsequently, 
any future requests to find resources just scan the existing table of previously 
found resources. The default resource manager is also a singleton within a process. Creating 
a second or third InstrumentFinder will result in the same, single default resource manager 
being used. In order to get a new default resource manager that will dynamically finds 
instruments, you need to dispose of all instances of InstrumentFinder. Once the last 
default resource manager session is closed, the next session to open the default resource 
manager creates a new instance of the default resource manager, and it will dynamically 
discover instruments.
</remarks><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException">Agilent VISA is not intalled.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException">The version of VISA doesn't support viOpenDefaultRM.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.Finalize">
            <summary>
            Finalize method.
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.Dispose">
            <summary>
Since the InstrumentFinder holds open a default resource manager session, you can close
that session explicitly by calling Dispose.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.CancelFindResourcesInvocation">
            <summary>
If the FindResources method is invoked on a separate thread, this method can be used to 
cancel the operation before it completes.
</summary><remarks>
When the FindResources method is cancelled, it returns the results up to the point where the 
operation was cancelled. <b>Note:</b> Since it is not possible to cancel calls to VISA, the cancel does 
not happen immediately. It happens when control is returned from VISA back to the FindResources 
method.
</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.CancelGetInstrAttributesInvocation">
            <summary>
If the GetInstrAttributes method is invoked on a separate thread, this method can be used to 
cancel the operation before it completes.
</summary><remarks>
When the GetInstrAttributes method is cancelled, it returns the results up to the point where the 
operation was cancelled. <b>Note:</b> Since it is not possible to cancel calls to VISA, the cancel does 
not happen immediately. It happens when control is returned from VISA back to the GetInstrAttributes 
method.
</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.CancelIdentifyInstrResourcesInvocation">
            <summary>
If the IdentifyInstrResources method is invoked on a separate thread, this method can be used to 
cancel the operation before it completes.
</summary><remarks>
When the IdentifyInstrResources method is cancelled, it returns the results up to the point where the 
operation was cancelled. <b>Note:</b> Since it is not possible to cancel calls to VISA, the cancel does 
not happen immediately. It happens when control is returned from VISA back to the IdentifyInstrResources 
method.
</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindAllInstrResources">
            <summary>
Searches for all INSTR resources using the search expression "?*INSTR".
</summary><returns>
An array of strings containing the INSTR resources that were found.
</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindAllGpibInstrResources">
            <summary>
Searches for all GPIB INSTR resources using the search expression "GPIB[0-9]*::?*INSTR".
</summary><returns>
An array of strings containing the GPIB INSTR resources that were found.
</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindAllGpibVxiInstrResources">
            <summary>
Searches for all GPIB-VXI INSTR resources using the search expression "GPIB-VXI?*INSTR".
</summary><returns>
An array of strings containing the GPIB-VXI INSTR resources that were found.
</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindAllVxiInstrResources">
            <summary>
Searches for all VXI INSTR resources using the search expression "GPIB-VXI?*INSTR".
</summary><returns>
An array of strings containing the VXI INSTR resources that were found.
</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindAllAsrlInstrResources">
            <summary>
Searches for all ASRL INSTR resources using the search expression "ASRL?*INSTR".
</summary><returns>
An array of strings containing the ASRL INSTR resources that were found.
</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindAllTcpipInstrResources">
            <summary>
Searches for all TCPIP INSTR resources using the search expression "TCPIP?*INSTR".
</summary><returns>
An array of strings containing the TCPIP INSTR resources that were found.
</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindResources(System.String)">
            <summary>
Finds VISA resource names using the VISA functions viFindRsrc and viFindNext.
</summary><param name="searchExpression">A VISA regular expression search string used to direct what types of resources are returned."</param><returns>A sorted array of strings containing the instrument resources that were found.</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:System.ArgumentNullException">When searchExpression is null.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception><example>
<code>
using System;
using Agilent.TMFramework.InstrumentIO.Discovery;

class App
{
    static void Main()
    {
        // The using statement handles disposing of the InstrumentFinder
        // when we are done with it.
        using (InstrumentFinder finder = new InstrumentFinder())
        {
            string searchExpr = "GPIB[3-6]?*INSTR";
            string[] resourceNames = finder.FindResources(searchExpr);
        
            foreach (string name in resourceNames)
            {
                Console.WriteLine("Found resource name: {0}", name);
            }
        }
    }
}
</code>
</example>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindResources(System.String,System.Boolean)">
            <summary>
Finds instrument resources using the VISA functions viFindRsrc and viFindNext.
</summary><param name="searchExpression">A VISA regular expression search string used to direct what types of resources are returned.</param><param name="sortResults">Determines whether or not the results are sorted.</param><returns>An array of strings containing the instrument resources that were found.</returns><remarks>
If this method is executed on a worker thread, you can use the <see cref="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.CancelFindResourcesInvocation"/> method to cancel 
the invocation of this method. At the point the method is cancelled it returns the results it has accumulated.
</remarks><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:System.ArgumentNullException">When searchExpression is null.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.GetInstrAttributes(System.String[])">
            <summary>
Returns an array of subclasses of InstrAttributes that describe information about the specified
resource names such as the IP address if a resource name represents a LAN instrument.
</summary><param name="resourceNames">The resource names to get information about.</param><returns>An array of subclasses of InstrAttributes specific to the specified resource names 
that contain information about the specified resource names.
</returns><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:System.ArgumentException">When one of the resourceNames is not a valid VISA resource name.</exception><exception cref="T:System.ArgumentNullException">When resourceNames is null.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.GetInstrAttributes(System.String)">
            <summary>
Returns a subclass of InstrAttributes that describe information about the specified 
resource name such as the IP address if the resource name represents a LAN instrument.
</summary><param name="resourceName">The resource name to get information about.</param><returns>A subclass of InstrAttributes specific to the specified resource name 
that contains information about the resource.
</returns><remarks>
If this method is executed on a worker thread, you can use the <see cref="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.CancelGetInstrAttributesInvocation"/> method to cancel 
the invocation of this method. At the point the method is cancelled, it returns the results it has accumulated.
</remarks><exception cref="T:System.ObjectDisposedException">When the InstrumentFinder object has already been disposed.</exception><exception cref="T:System.ArgumentException">When resourceName is not a valid VISA resource name.</exception><exception cref="T:System.ArgumentNullException">When resourceName is null.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.IdentifyInstrResources(System.String[])">
            <summary>
Identifies the instruments specified by resourceNames by sending the IEEE 488.2 query *IDN? to 
each of the instruments. A default timeout of two seconds is used.
</summary><param name="resourceNames">The VISA resource names associated with an instrument.</param><returns>An array of *IDN? responses from the instruments specified by resourceNames.</returns><remarks>
If this method is executed on a worker thread, you can use the <see cref="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.CancelIdentifyInstrResourcesInvocation"/> method to cancel 
the invocation of this method. At the point the method is cancelled, it returns the results it has accumulated. 
<b>Note:</b> Not all instruments are IEEE 488.2 compliant. The behavior resulting from sending a 
*IDN? query to one of these non-compliant instruments is undefined.
</remarks><exception cref="T:System.ArgumentException">One of the resourceNames isn't a valid VISA resource name.</exception><exception cref="T:System.ArgumentNullException">resourceNames is null.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.IdentifyInstrResources(System.String[],System.Int32)">
            <summary>
Identifies the the instruments specified by resourceNames by sending the IEEE 488.2 query *IDN? to 
each of the instruments.
</summary><param name="resourceNames">The VISA resource names associated with an instrument.</param><param name="timeout">The timeout value to use when performing the *IDN? query to the instruments.</param><returns>An array of *IDN? responses from the instruments specified by resourceNames.</returns><remarks>
If this method is executed on a worker thread, you can use the <see cref="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.CancelIdentifyInstrResourcesInvocation"/> method to cancel 
the invocation of this method. At the point the method is cancelled it returns the results it has accumulated. 
The returned array of strings always matches the size of the resourceNames array passed, however, if the 
search was cancelled or an error occurred, the associated array elements will be null. 
<b>Note:</b> Not all instruments are IEEE 488.2 compliant. The behavior resulting from sending a 
*IDN? query to one of these non-compliant instruments is undefined.
</remarks><exception cref="T:System.ArgumentException">One of the resourceNames isn't a valid VISA resource name.</exception><exception cref="T:System.ArgumentNullException">resourceNames is null.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.IdentifyInstrResource(System.String)">
            <summary>
Identifies the the instrument specified by resourceName by sending the IEEE 488.2 query *IDN? to 
the instrument. A default timeout of two seconds is used.
</summary><param name="resourceName">The VISA resource name associated with an instrument.</param><returns>The *IDN? response from the instrument specified by resourceName.</returns><remarks>
Not all instruments are IEEE 488.2 compliant. The behavior resulting from sending a
*IDN? query to one of these non-compliant instruments is undefined.
</remarks><exception cref="T:System.ArgumentException">resourceName isn't a valid VISA resource name.</exception><exception cref="T:System.ArgumentNullException">resourceName is null.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.IdentifyInstrResource(System.String,System.Int32)">
            <summary>
Identifies the the instrument specified by resourceName by sending the IEEE 488.2 query *IDN? to 
the instrument.
</summary><param name="resourceName">The VISA resource name associated with an instrument.</param><param name="timeout">The timeout value to use when performing the *IDN? query to the instrument.</param><returns>The *IDN? response from the instrument specified by resourceName.</returns><remarks>
Not all instruments are IEEE 488.2 compliant. The behavior resulting from sending a 
*IDN? query to one of these non-compliant instruments is undefined.
</remarks><exception cref="T:System.ArgumentException">resourceName isn't a valid VISA resource name.</exception><exception cref="T:System.ArgumentNullException">resourceName is null.</exception><exception cref="T:Agilent.TMFramework.InstrumentIO.VisaException">Underlying VISA library returns an error code.</exception>
        </member>
        <member name="E:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.FindResourcesProgress">
            <summary>
Represents the event fired to indicate the progress of the FindResources operation.
</summary>
        </member>
        <member name="E:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.GetInstrAttributesProgress">
            <summary>
Represents the event fired to indicate the progress of the GetInstrAttributes operation.
</summary>
        </member>
        <member name="E:Agilent.TMFramework.InstrumentIO.Discovery.InstrumentFinder.IdentifyInstrResourcesProgress">
            <summary>
Represents the event fired to indicate the progress of the IdentifyInstrResources operation.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase">
            <summary>
            Summary description for VxiDatabase.
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetVxiDeviceInfo(System.Int32,System.Int32)">
            <summary>
            Returns a reference to VxiDeviceInfo class for the given manufaturer and model ID's.
            If there is no match, the return value is null.
            </summary>
            <param name="manufId"></param>
            <param name="modelId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetManufacturerInfo(System.Int32)">
            <summary>
            Returns a reference to VxiManufacturerInfo class for the given manufacturer id.
            If there is no match, the return value is null.
            </summary>
            <param name="manufId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetManufacturerName(System.Int32)">
            <summary>
             Returns the manufacturer name for the given manufacturer id.
             If no match is found, the return value is String.Empty
            </summary>
            <param name="manufacturerId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetManufacturerAbbr(System.Int32)">
            <summary>
            Returns the manufacturer abbreviatioin for the given manufacturer id.
            If no match is found, the return value is String.Empty.
            </summary>
            <param name="manufacturerId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetManufacturerAbbr(System.String)">
            <summary>
            Returns the manufacturer abbreviatioin for the given manufacturer name.
            If no match is found, the return value is String.Empty.
            </summary>
            <param name="manufacturerName"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetModelIds(System.Int32)">
            <summary>
            Returns an int array of model ID's for the given manufacturer ID.
            If not match is found, an empty array is returned.
            </summary>
            <param name="manufacturerId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetModelNames(System.Int32)">
            <summary>
            Returns string array of model Names for the given manufacturer ID.
            If not match is found, an empty array is returned.
            </summary>
            <param name="manufacturerId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetManufacturerIds">
            <summary>
            Returns an int array of manufacturer IDs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.GetManufacturerNames">
            <summary>
            Returns a string array of manufacturer names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceDatabase.BuildVxiDatabase(System.IO.Stream)">
            <summary>
            Build VXI manufacturer/device database from an XML database file stream.
            </summary>
            <param name="xmlstream"></param>
            <returns></returns>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="abbr"></param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.Id">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.IdNum">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.Name">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.Abbreviation">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo.VxiDevices">
            <summary></summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="modelId"></param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="modelId"></param>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.Id">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.IdNum">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.Name">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.Description">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.ManufacturerName">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo.ManufacturerId">
            <summary></summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection">
            <summary>
                <para>
                  A collection that stores <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> objects.
               </para>
            </summary>
            <seealso cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.#ctor">
            <summary>
                <para>
                  Initializes a new instance of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/>.
               </para>
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.#ctor(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection)">
            <summary>
                <para>
                  Initializes a new instance of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> based on another <see langword="VxiDeviceInfoCollection"/>.
               </para>
            </summary>
            <param name="value">
                  A <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> from which the contents are copied
            </param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.#ctor(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo[])">
            <summary>
                <para>
                  Initializes a new instance of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> containing any array of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> objects.
               </para>
            </summary>
            <param name="value">
                  A array of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> objects with which to intialize the collection
            </param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)">
            <summary>
               <para>Adds a <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> with the specified value to the 
               <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> to add.</param>
            <returns>
               <para>The index at which the new element was inserted.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.AddRange(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo[])">VxiDeviceInfoCollection.AddRange</seealso>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.AddRange(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo[])">
            <summary>
            <para>Copies the elements of an array to the end of the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/>.</para>		/// </summary>
            <param name="value">
               An array of type <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.AddRange(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection)">
            <summary>
                <para>
                  Adds the contents of another <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> to the end of the collection.
               </para>
            </summary>
            <param name="value">
               A <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Contains(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)">
            <summary>
            <para>Gets a value indicating whether the 
               <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> contains the specified <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/>.</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> to locate.</param>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> is contained in the collection; 
              otherwise, <see langword="false"/>.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.IndexOf(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.CopyTo(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo[],System.Int32)">
            <summary>
            <para>Copies the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> values to a one-dimensional <see cref="T:System.Array"/> instance at the 
               specified index.</para>
            </summary>
            <param name="array"><para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> .</para></param>
            <param name="index">The index in <paramref name="array"/> where copying begins.</param>
            <returns>
              <para>None.</para>
            </returns>
            <exception cref="T:System.ArgumentException"><para><paramref name="array"/> is multidimensional.</para> <para>-or-</para> <para>The number of elements in the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> is greater than the available space between <paramref name="arrayIndex"/> and the end of <paramref name="array"/>.</para></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than <paramref name="array"/>'s lowbound. </exception>
            <seealso cref="T:System.Array"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.IndexOf(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)">
            <summary>
               <para>Returns the index of a <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> in 
                  the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> to locate.</param>
            <returns>
            <para>The index of the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> of <paramref name="value"/> in the 
            <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/>, if found; otherwise, -1.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Contains(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Insert(System.Int32,Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)">
            <summary>
            <para>Inserts a <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> into the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> at the specified index.</para>
            </summary>
            <param name="index">The zero-based index where <paramref name="value"/> should be inserted.</param>
            <param name=" value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> to insert.</param>
            <returns><para>None.</para></returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.GetEnumerator">
            <summary>
               <para>Returns an enumerator that can iterate through 
                  the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> .</para>
            </summary>
            <returns><para>None.</para></returns>
            <seealso cref="T:System.Collections.IEnumerator"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Remove(Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo)">
            <summary>
               <para> Removes a specific <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> from the 
               <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/> to remove from the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection"/> .</param>
            <returns><para>None.</para></returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not found in the Collection. </exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.GetDeviceInfo(System.Int32)">
            <summary>
            look for a single VXI Device whose id is equal to the input value
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.GetModelNames">
            <summary></summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.GetModelIds">
            <summary></summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfoCollection.Item(System.Int32)">
            <summary>
            <para>Represents the entry at the specified index of the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiDeviceInfo"/>.</para>
            </summary>
            <param name="index"><para>The zero-based index of the entry to locate in the collection.</para></param>
            <value>
               <para> The entry at the specified index of the collection.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the valid range of indexes for the collection.</exception>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection">
            <summary>
                <para>
                  A collection that stores <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> objects.
               </para>
            </summary>
            <seealso cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.#ctor">
            <summary>
                <para>
                  Initializes a new instance of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/>.
               </para>
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.#ctor(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection)">
            <summary>
                <para>
                  Initializes a new instance of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> based on another <see langword="VxiManufacturerInfoCollection"/>.
               </para>
            </summary>
            <param name="value">
                  A <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> from which the contents are copied
            </param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.#ctor(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo[])">
            <summary>
                <para>
                  Initializes a new instance of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> containing any array of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> objects.
               </para>
            </summary>
            <param name="value">
                  A array of <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> objects with which to intialize the collection
            </param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)">
            <summary>
               <para>Adds a <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> with the specified value to the 
               <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> to add.</param>
            <returns>
               <para>The index at which the new element was inserted.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.AddRange(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo[])">VxiManufacturerInfoCollection.AddRange</seealso>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.AddRange(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo[])">
            <summary>
            <para>Copies the elements of an array to the end of the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/>.</para>
            </summary>
            <param name="value">
               An array of type <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.AddRange(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection)">
            <summary>
                <para>
                  Adds the contents of another <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> to the end of the collection.
               </para>
            </summary>
            <param name="value">
               A <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Contains(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)">
            <summary>
            <para>Gets a value indicating whether the 
               <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> contains the specified <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/>.</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> to locate.</param>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> is contained in the collection; 
              otherwise, <see langword="false"/>.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.IndexOf(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.CopyTo(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo[],System.Int32)">
            <summary>
            <para>Copies the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> values to a one-dimensional <see cref="T:System.Array"/> instance at the 
               specified index.</para>
            </summary>
            <param name="array"><para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> .</para></param>
            <param name="index">The index in <paramref name="array"/> where copying begins.</param>
            <returns>
              <para>None.</para>
            </returns>
            <exception cref="T:System.ArgumentException"><para><paramref name="array"/> is multidimensional.</para> <para>-or-</para> <para>The number of elements in the
            <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> is greater than the available space between <paramref name="arrayIndex"/> and the end of <paramref name="array"/>.</para></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than <paramref name="array"/>'s lowbound. </exception>
            <seealso cref="T:System.Array"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.IndexOf(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)">
            <summary>
               <para>Returns the index of a <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> in 
                  the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> to locate.</param>
            <returns>
            <para>The index of the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> of <paramref name="value"/> in the 
            <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/>, if found; otherwise, -1.</para>
            </returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Contains(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Insert(System.Int32,Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)">
            <summary>
            <para>Inserts a <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> into the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> at the specified index.</para>
            </summary>
            <param name="index">The zero-based index where <paramref name="value"/> should be inserted.</param>
            <param name=" value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> to insert.</param>
            <returns><para>None.</para></returns>
            <seealso cref="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Add(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetEnumerator">
            <summary>
               <para>Returns an enumerator that can iterate through 
                  the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> .</para>
            </summary>
            <returns><para>None.</para></returns>
            <seealso cref="T:System.Collections.IEnumerator"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Remove(Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo)">
            <summary>
               <para> Removes a specific <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> from the 
               <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> .</para>
            </summary>
            <param name="value">The <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/> to remove from the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection"/> .</param>
            <returns><para>None.</para></returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not found in the Collection. </exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetDevices(System.Int32)">
            <summary>
            Find the list of VXI Instruments for the manufacturer whose is the input
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetManufacturerInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetManufacturerInfo(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetManufacturerName(System.Int32)">
            <summary>
            
            </summary>
            <param name="manufacturerId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetManufacturerAbbreviation(System.String)">
            <summary>
            
            </summary>
            <param name="manufacturerName"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetManufacturerAbbreviation(System.Int32)">
            <summary>
            
            </summary>
            <param name="manufacturerId"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetManufacturerIds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetManufacturerNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetModelNames(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.GetModelIds(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfoCollection.Item(System.Int32)">
            <summary>
            <para>Represents the entry at the specified index of the <see cref="T:Agilent.TMFramework.InstrumentIO.Discovery.VxiManufacturerInfo"/>.</para>
            </summary>
            <param name="index"><para>The zero-based index of the entry to locate in the collection.</para></param>
            <value>
               <para> The entry at the specified index of the collection.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the valid range of indexes for the collection.</exception>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.SR">
            <summary>
            Shared Resource Manager Implementation. All resource names are available
            via the public const string fields in this class.
            </summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.UnrecognizedVisaAddress">
            <summary>The address "{0}" is not a valid VISA address.  If the address is a VISA alias, make sure you have created the alias using the Agilent Connection Expert.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.OnlyInstrResourceClassSupported">
            <summary>Only the INSTR resource class is supported.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.OnlyInstrAndSocketResourceClassSupported">
            <summary>Only the INSTR and SOCKET resource classes are supported.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Arg_InvalidIndexCountCombo">
            <summary>The combination of index and count values is invalid.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Arg_MustBeGreaterThanZero">
            <summary>The value must be greater than zero.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.VisaResName_InvalidResourceName">
            <summary>{0} is not a valid VISA resourceName</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.VisaResName_UnknownResType">
            <summary>Unknown VisaResourceType</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.VisaResComparerArgEx_TypeNotString">
            <summary>Argument {0} must be of type System.String</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.VisaException_MessageFormat">
            <summary>VisaStatus: {0}, ErrorCode: 0x{1:X8} ({1})</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Ex_CantCallMethodOnSrqThread">
            <summary>The method cannot be called from within a DirectIO.ServiceRequest event handler. It would result in deadlock.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.ObjectDisposedException_MessageFormat">
            <summary>{0} with hashcode:{1} on thread hashcode:{2} thread name:"{3}"</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.ArgEx_InvalidPreamble">
            <summary>The preamble is invalid:"{0}"</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.ArgEx_UnrecognizedInterfaceType">
            <summary>Unrecognized interface type: {0} from resourceName:{1}</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Srq_NotSupportedBySocket">
            <summary>The ServiceRequest event is not supported on sessions of type SOCKET.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.ReadSTB_NotSupportedBySocket">
            <summary>The ReadStatusByte method is not supported on sessions of type SOCKET.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_OperationCancelled">
            <summary>Operation cancelled</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_VisaNotFound">
            <summary>Make sure the Agilent I/O Libraries are properly installed.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_VisaNewerVersionRequired">
            <summary>A newer version of the Agilent I/O Libraries is required.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_OpenDefaultRmFailed">
            <summary>Could not open the default resource manager.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_IdnFailed">
            <summary>Identify failed on {0} with error {1}</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_QueryRmProgressUpdate">
            <summary>Querying VISA Resource Manager</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_FoundResourceProgressUpdate">
            <summary>Found instrument at {0}</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_QueryAttrProgressUpdate">
            <summary>Querying attributes of {0}</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_DetectCompleteProgressUpdate">
            <summary>Instrument discovery completed.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_IdentifyProgressUpdate">
            <summary>Identifying instrument at {0}</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_None">
            <summary>None</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_DefaultLogicalName">
            <summary>NewInstrument</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_GpibInterfaceNodeExtraInfo">
            <summary>(VISA LAN Client - {0})</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.SR.Discovery_GpibVxiInterfaceNodeExtraInfo">
            <summary>(on GPIB{0})</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.SR.GetString(System.String)">
            <summary>
            Returns the value of the specified String resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings. 
            If a match is not possible, a null reference is returned.
            </returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.SR.GetString(System.String,System.Object[])">
            <summary>
            Returns the formatted string given the name of String resource containing
            a format string and the arguments to be substituted for each numbered
            format specification in the format string.
            </summary>
            <param name="name">The name of the resource string that containing zero or more format specifications.</param>
            <param name="args">An Object array containing zero or more objects to be formatted.</param>
            <returns>
            The formatted string that uses the value of the resource localized for the caller's current culture settings
            as a formatting string along.  If a match is not possible, a null reference is returned.
            </returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.SR.GetString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Gets the value of the String resource localized for the specified culture.
            </summary>
            <param name="culture">
            The CultureInfo object that represents the culture for which the resource is localized. 
            Note that if the resource is not localized for this culture, the lookup will fall back 
            using the culture's Parent property, stopping after looking in the neutral culture. 
            If this value is a null reference, the CultureInfo is obtained using the culture's 
            CurrentUICulture property.
            </param>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource, localized for the specified culture. If a "best match" is 
            not possible, a null reference is returned.
            </returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.SR.GetString(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Returns the formatted string given the name of String resource containing a format string
            for the specified culture and the arguments to be substituted for each numbered
            format specification in the format string.
            </summary>
            <param name="culture">
            The CultureInfo object that represents the culture for which the resource is localized. 
            Note that if the resource is not localized for this culture, the lookup will fall back 
            using the culture's Parent property, stopping after looking in the neutral culture. 
            If this value is a null reference, the CultureInfo is obtained using the culture's 
            CurrentUICulture property.
            </param>
            <param name="name">The name of the resource string that containing zero or more format specifications.</param>
            <param name="args">An Object array containing zero or more objects to be formatted.</param>
            <returns>
            The formatted string that uses the value of the resource, localized for the specified culture as a 
            formatting string. If a "best match" is not possible, a null reference is returned.
            </returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.SR.GetObject(System.String)">
            <summary>
            Returns the value of the specified Object resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings. If a match 
            is not possible, a null reference is returned. The resource value can be a null reference.
            </returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.SR.GetObject(System.Globalization.CultureInfo,System.String)">
            <summary>
            Gets the value of the Object resource localized for the specified culture.
            </summary>
            <param name="culture">
            The CultureInfo object that represents the culture for which the resource is localized. 
            Note that if the resource is not localized for this culture, the lookup will fall back 
            using the culture's Parent property, stopping after looking in the neutral culture. 
            If this value is a null reference, the CultureInfo is obtained using the culture's 
            CurrentUICulture property.
            </param>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings. If a match 
            is not possible, a null reference is returned. The resource value can be a null reference.
            </returns>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaException">
            <summary>
Provides for the handling of VISA exceptions.
</summary><summary>
Provides methods for handling exceptions.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaException.#ctor(Agilent.TMFramework.InstrumentIO.VisaStatus)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaException"/> class with a specified VISA error code.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaException.#ctor(Agilent.TMFramework.InstrumentIO.VisaStatus,System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaException"/> class with a specified VISA error code and error message.
</summary><param name="errorCode">The VISA specific error code.</param><param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaException.#ctor(Agilent.TMFramework.InstrumentIO.VisaStatus,System.String,System.Exception)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaException"/> class with a specified VISA error code, error message 
and a reference to the inner exception that is the root cause of this exception.
</summary><param name="errorCode">A VISA specific error code.</param><param name="message">The error message that explains the reason for the exception.</param><param name="inner">A reference to the inner exception.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaException"/> class with serialized data.		
</summary><param name="info">The object that holds the serialized object data.</param><param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
 
</summary><param name="info"></param><param name="context"></param><summary>
Gets the VisaStatus error message. 
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaException.ErrorCode">
            <summary>
Gets the VISA error code that caused the exception.
</summary><value>The VISA error code associated with this exception.</value>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaException.Message">
            <summary>
Gets the error message text.
</summary><value>The text string describing the details of the exception.</value><summary>
Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with information about the exception.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException">
            <summary>
            The exception that is thrown when an instance of <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException"/> encounters an error.
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException"/> class. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException"/> class. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">
            An instance of <see cref="T:System.Exception"/> that is the cause of the current 
            <see langword="Exception"/>. If <paramref name="innerException"/> is non-null, 
            then the current <see langword="Exception"/> is raised in a catch block handling 
            <paramref name="innerException"/>.
            </param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNotInstalledException"/> class with serialized data. 
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException">
            <summary>
            The exception that is thrown when an instance of <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException"/> encounters an error.
            </summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException"/> class. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException"/> class. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">
            An instance of <see cref="T:System.Exception"/> that is the cause of the current 
            <see langword="Exception"/>. If <paramref name="innerException"/> is non-null, 
            then the current <see langword="Exception"/> is raised in a catch block handling 
            <paramref name="innerException"/>.
            </param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaNewerVersionRequiredException"/> class with serialized data. 
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaConstants">
            <summary>
These constants are used by VISA.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaConstants.Success">
            <summary>
The operation completed successfully.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaConstants.Null">
            <summary>
A Null value.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaConstants.True">
            <summary>
A value equivalent to True.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaConstants.False">
            <summary>
A value equivalent to False.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaStatus">
            <summary>
The VisaStatus section contains the enumerated values for VISA success, warning, and error codes.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessEventEnabled">
            <summary>
The specified event is already enabled for at least one of the specified mechanisms.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessEventDisabled">
            <summary>
The specified event is already disabled.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessQueueEmpty">
            <summary>
The event queue was empty while trying to discard queued events.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessTerminationChar">
            <summary>
The specified termination character was read.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessMaxCount">
            <summary>
The number of bytes specified were read.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessDeviceNotPresent">
            <summary>
Session opened successfully, but the device at the specified address is not responding.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessTrigMapped">
            <summary>
The path from trigger source to trigger destination is already mapped.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessQueueNotEmpty">
            <summary>
The event queue is not empty.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessDoNotChain">
            <summary>
Event has been handled successfully. Do not invoke any other handlers on this session for this 
event.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessNestedShared">
            <summary>
The specified access mode was successfully acquired and this session has nested shared locks.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessNestedExclusive">
            <summary>
The specified access mode was successfully acquired and this session has nested exclusive locks.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.SuccessSync">
            <summary>
The read or write operation performed synchronously.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.WarningQueueOverflow">
            <summary>
The Event Queue overflowed.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.WarningConfigNotLoaded">
            <summary>
The specified configuration either does not exist or could not be loaded using VISA-specified 
defaults.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.WarningNullObject">
            <summary>
The specified object reference is uninitialized.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.WarningNonSupportedAttrState">
            <summary>
The attribute state is not supported by this resource.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.WarningUnknownStatus">
            <summary>
The status code passed to the function could not be interpreted.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.WarningNonSupportedBuffer">
            <summary>
The specified buffer is not supported.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.WarningExternalFunctionNotImplemented">
            <summary>
The external function has not been implemented.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorSystemError">
            <summary>
Unknown system error.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidObject">
            <summary>
The object reference is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorResourceLocked">
            <summary>
The specified operation could not be performed because the VISA session has been locked for 
this kind of access.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidExpression">
            <summary>
The expression specified is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorResourceNotFound">
            <summary>
The expression specified does not match any device, or the resource was not found.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidResourceName">
            <summary>
The resources specified are invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidAccessMode">
            <summary>
The access mode specified is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorTimeout">
            <summary>
The operation failed to complete within the specified timeout period.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorClosingFailed">
            <summary>
Unable to deallocate the previously allocated data structures for this session.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidDegree">
            <summary>
The specified degree is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidJobId">
            <summary>
The specified job identifier is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedAttr">
            <summary>
The attribute specified is not supported by the specified resource.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedAttrState">
            <summary>
The state specified for the attribute is not supported.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorAttrReadOnly">
            <summary>
The attribute specified is read-only.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidLockType">
            <summary>
The specified type of lock is not supported by this resource.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidAccessKey">
            <summary>
The <see langword="requestedKey"/> value passed in is not a valid access key to the specified 
resource.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidEvent">
            <summary>
The event type specified is invalid for the specified resource.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidMechanism">
            <summary>
The mechanism specified for the event is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorHandlerNotInstalled">
            <summary>
A handler for the specified event is not currently installed. The session cannot be enabled for 
the VI_HNDLR mode of the callback mechanism.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidHandlerRef">
            <summary>
The specified handler reference and/or the user context value does not match the installed 
handler.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidContext">
            <summary>
The event context specified is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorQueueOverflow">
            <summary>
The event queue has overflowed.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNotEnabled">
            <summary>
The session must be enabled for events of the specified type to receive them.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorAbort">
            <summary>
Calls in the current process executing on the specified VISA session are aborted.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorRawWriteProtocolViolation">
            <summary>
A violation of raw write protocol occurred during a transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorRawReadProtocolViolation">
            <summary>
A violation of raw read protocol occurred during a transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorOutputProtocolViolation">
            <summary>
Output protocol error occurred during transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInputProtocolViolation">
            <summary>
Input protocol error occurred during transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorBusError">
            <summary>
A bus error occurred during transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInProgress">
            <summary>
An error has occurred with an operation in progress.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidSetup">
            <summary>
The setup specified is invalid. This may be due to attributes being set to an inconsistent 
state, or some implementation specific configuration file being corrupt or nonexistent.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorQueueError">
            <summary>
Unable to queue read or write operation.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorAllocation">
            <summary>
Insufficient system resources to open a session or to allocate the buffer(s) or memory block of 
the specified size.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidMask">
            <summary>
The system cannot set the buffer for the given mask, or the mask does not specify a valid flush 
operation on the read/write resource.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorIO">
            <summary>
Could not perform read/write function because of an I/O error, or an unknown I/O error occurred 
during transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidFormat">
            <summary>
The format specifier is invalid for the current argument.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedFormat">
            <summary>
The format specifier is not supported for the current argument type.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorLineInUse">
            <summary>
The specified trigger line is in use.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedMode">
            <summary> [To be supplied.] </summary>
            <summary>
The specified mode is not supported by this VISA implementation.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorSrqNotReceived">
            <summary>
A service request has not been received for the session.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidSpace">
            <summary>
The address space specified is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidOffset">
            <summary>
The offset specified is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidWidth">
            <summary>
Invalid source or destination width specified.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedOffset">
            <summary>
The offset specified is not accessible.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedVarWidth">
            <summary>
The specified width is not supported by this hardware.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorWindowNotMapped">
            <summary>
The specified session is not currently mapped.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorResponsePending">
            <summary>
A previous response is still pending, causing a multiple query error.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNoListeners">
            <summary>
No listeners are detected. (Both NRFD and NDAC are deasserted.)
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNotCic">
            <summary>
The session is referring to something other than the controller in charge.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNotSystemController">
            <summary>
The interface associated with this session is not the system controller.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedOperation">
            <summary>
The operation specified is not supported in the given session.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInterruptPending">
            <summary>
An interrupt is still pending from a previous call.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorAsrlParity">
            <summary>
A parity error occurred during transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorAsrlFraming">
            <summary>
A framing error occurred during transfer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorAsrlOverrun">
            <summary>
An overrun error occurred during transfer. A character was not read from the hardware before the 
next character arrived.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorTrigNotMapped">
            <summary>
The path from trigger source to trigger destination is not currently mapped.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedAlignOffset">
            <summary>
The specified offset is not properly aligned for the access width of the operation.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorUserBuffer">
            <summary>
A specified user buffer is not valid or cannot be accessed for the required size.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorResourceBusy">
            <summary>
The resource is valid, but VISA cannot currently access it.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedWidth">
            <summary>
The specified width is not supported by this hardware.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidParameter">
            <summary>
The value of some parameter is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidProtocol">
            <summary>
The protocol specified is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidSize">
            <summary>
The specified size is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorWindowAlreadyMapped">
            <summary>
The specified session already contains a mapped window.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonImplementedOperation">
            <summary>
The given operation is not implemented.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidLength">
            <summary>
The length specified is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidMode">
            <summary>
The value specified by the mode parameter is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorSessionNotLocked">
            <summary>
The current session did not have any lock on the resource.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorMemoryNotShared">
            <summary>
The device does not export any memory.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorLibraryNotFound">
            <summary>
A code library required by VISA could not be located or loaded.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedInterface">
            <summary>
The interface cannot generate an interrupt on the requested level or with the requested 
statusID value.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorInvalidLine">
            <summary>
The value specified by the line parameter is invalid.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorFileAccess">
            <summary>
An error occurred while trying to open the specified file. Possible reasons include an invalid 
path or lack of access rights.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorFileIO">
            <summary>
An error occurred while accessing the specified file.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedLine">
            <summary>
One of the specified lines (trigger source or trigger destination) is not supported by this 
VISA implementation.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorNonSupportedMechanism">
            <summary>
The specified mechanism is not supported for the given event type.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorIntfNumNotConfigured">
            <summary>
The interface type is valid but the specified interface number is not configured.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaStatus.ErrorConnectionLost">
            <summary>
A TCP connection is dropped as a result of ifkeep-aliveslL packets.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaResourceType">
            <summary>
Indicates the various resource types used by VISA.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaResourceType.Backplane">
            <summary>
The Backplane resource lets a controller query and manipulate specific lines on a specific 
mainframe in a given VXI system. 
</summary><remarks>
<para>Services are provided to map, unmap, assert, and receive hardware triggers, and also to 
assert various utility and interrupt signals. This includes advanced functionality that may not 
be available in all implementations or all vendors' controllers.</para>
<para>While this resource is supported by Instrument Explorer, it is not supported by DirectIO.</para>
</remarks>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaResourceType.Instr">
            <summary>
The INSTR resource lets a controller interact with the device associated with it.
</summary><remarks>
<para>The INSTR resource provides services to send blocks of data to a device, request blocks of 
data from a device, send a device clear command to a device, trigger a device, and find out 
information about a device's status. In addition, the controller can access registers on 
devices that reside on memory-mapped buses.</para>
<para>This is the only VISA resource type supported by DirectIO.</para>
</remarks>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaResourceType.Intfc">
            <summary>
The INTFC resource provides services to send blocks of data onto the bus, request blocks of data 
from the bus, trigger devices on the bus, and send miscellaneous commands to any or all devices 
on the bus.
</summary><remarks>
<para>In addition, the controller can directly query and manipulate specific lines on the bus, 
and also pass control to other devices with controller capability.</para>
<para>This resource is supported by Instrument Explorer but is not supported by DirectIO.</para>
</remarks>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaResourceType.Memacc">
            <summary>
The Memacc resource provides the controller with services to access arbitrary registers or 
memory addresses on memory-mapped buses.
</summary><remarks>
<para>This resource is supported by Instrument Explorer but is not supported by DirectIO.</para>
</remarks>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaResourceType.Servant">
            <summary>
The Servant resource provides services to receive blocks of data from a commander and respond 
with blocks of data in return.
</summary><remarks>
<para>The Servant resource provides services to receive blocks of data from a commander and 
respond with blocks of data in return, setting a 488-style 
status byte, and receiving device clear and trigger events.</para>
<para>This resource is supported by Instrument Explorer but is not supported by DirectIO.</para>
</remarks>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaResourceType.Socket">
            <summary>
The Socket resource exposes the capability of a raw network socket connection over TCPIP. 
</summary><remarks>
<para>This ususally means Ethernet, but the protocol is not restricted to that physical interface. 
Services are provided to send and receive blocks of data. If the device is capable of communicating 
with 488.2-style strings, an attribute setting also allows sending software triggers, querying 
a 488-style status byte, and sending a device clear message.</para>
<para>This resource is supported by Instrument Explorer but is not supported by DirectIO.</para>
</remarks>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaInterfaceType">
            <summary>
The interfaces VISA supports.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaInterfaceType.Unknown">
            <summary>The interface type is unknown.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaInterfaceType.Gpib">
            <summary>
The General Purpose Interface Bus (GPIB - IEEE 488). 
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaInterfaceType.Vxi">
            <summary>
The VMEbus Extensions for Instrumentation (IEEE 1155). This Interface is not supported by DirectIO.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaInterfaceType.GpibVxi">
            <summary>
A GPIB interface card connected to a VXI mainframe. This Interface is not supported by DirectIO.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaInterfaceType.Asrl">
            <summary>
A serial interface.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaInterfaceType.TcpIp">
            <summary>
The TCPIP interface.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaInterfaceType.Usb">
            <summary>
The Universal Serial Bus (USB) interface.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaVxiDeviceClass">
            <summary>Indicates the type of VXI device class.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaVxiDeviceClass.Memory">
            <summary>Specifies that the device class is type memory.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaVxiDeviceClass.Extended">
            <summary>Specifies that the device class is type extended.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaVxiDeviceClass.Message">
            <summary>Specifies that the device class is message based.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaVxiDeviceClass.Register">
            <summary>Specifies that the device class is register based.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaVxiDeviceClass.Other">
            <summary>Specifies that the device class is type other.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaLineState">
            <summary>
Within the VISA protocol, all of the interfaces have control lines. These 
control lines have states of existence.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaLineState.Asserted">
            <summary>
The line is active.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaLineState.Unasserted">
            <summary>
The line is inactive.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaLineState.Unknown">
            <summary>
The line is in an unknown state.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaRenControl">
            <summary>
Many devices have a control for Remote ENable (REN). The various REN states 
show whether the device is managed from the front panel or remotely.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaRenControl.Deassert">
            <summary>
Deassert the REN line.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaRenControl.Assert">
            <summary>
Assert the REN line.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaRenControl.GoToLocalAndDeassert">
            <summary>
Send a Go To Local command (GTL) to the device and deassert the REN line.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaRenControl.AssertAndAddress">
            <summary>
Assert the REN line and address the device.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaRenControl.LocalLockOut">
            <summary>
Send a Local Lock Out command (LLO) to any devices that are addressed to 
listen.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaRenControl.AddressAndLocalLockOut">
            <summary>
Address the device and send it a Local Lock Out command (LLO), putting it in the remote with 
lockout state (RWLS).
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaRenControl.AddressAndGoToLocal">
            <summary>
Address the device and send the Go To Local command (GTL) to the device.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaSerialEnd">
            <summary>
Supported serial transmission terminators.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialEnd.None">
            <summary>
A read will not terminate until all of the requested data is received (or an error occurs). A 
write will not append anything to the data being written.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialEnd.LastBit">
            <summary>
A read will terminate as soon as a character arrives with its last bit set. 
</summary><remarks>
For example, if data bits is set to 8, then the read will terminate when a character arrives 
with the 8th bit set.  A write will send all but the last character with the last bit clear, 
then transmit the last character with the last bit set.
</remarks>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialEnd.TermChar">
            <summary>
A read will terminate as soon as the termination character is received. A write will send the 
character in a termination character after the data has been transmitted.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialEnd.Break">
            <summary>
A write will transmit a break after all the characters have been sent.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaSerialFlowControlModes">
            <summary>
The supported methods for controlling the flow of data during a serial transmission.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialFlowControlModes.None">
            <summary>
No flow control is used at all.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialFlowControlModes.XonXoff">
            <summary>
Serial transmission is controlled using the XON and XOFF characters.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialFlowControlModes.RtsCts">
            <summary>
Serial transmission is controlled using the Ready to Send (RTS) and Clear to Send (CTS) control 
wires.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialFlowControlModes.DtrDsr">
            <summary>
Serial transmission is controlled using the Data Terminal Ready (DTR) and Data Set Ready (DSR) 
control wires.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialFlowControlModes.RtsCtsAndXonXoff">
            <summary>
Serial transmission is controlled using the Ready to Send (RTS) and Clear to Send (CTS) control 
wires and the XON/XOFF characters.
</summary><remarks>
This protocol combination is not supported by all operating systems or serial interfaces.
</remarks>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialFlowControlModes.DtrDsrAndXonXoff">
            <summary>
Serial transmission is controlled using the Data Terminal Ready (DTR) and Data Set Ready (DSR) 
control wires and the XON/XOFF characters.
</summary><remarks>
This protocol combination is not supported by all operating systems or serial interfaces.
</remarks>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaSerialParity">
            <summary>
The supported types of serial transmission parity.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialParity.None">
            <summary>
There is no parity used.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialParity.Odd">
            <summary>
The parity is always odd.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialParity.Even">
            <summary>
The parity is always even.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialParity.Mark">
            <summary>
The parity exists and is always equal to 1.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialParity.Space">
            <summary>
The parity exists and is always equal to 0.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaSerialStopBits">
            <summary>
The number of stop bits used to indicate the end of a frame.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialStopBits.One">
            <summary>
One stop bit.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialStopBits.OneAndAHalf">
            <summary>
One and a half stop bits.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaSerialStopBits.Two">
            <summary>
Two stop bits.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaIoBuffers">
            <summary>
Read, Write, or both buffers.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaIoBuffers.In">
            <summary>
Inbound buffer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaIoBuffers.Out">
            <summary>
Outbound buffer.
</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.VisaIoBuffers.Both">
            <summary>
Used to apply an operation to both inbound and outbound buffers.
</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.AgVisaInterfaceProtocol">
            <summary>Indicates which protocol is used to communicate with remote instruments.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.AgVisaInterfaceProtocol.Unknown">
            <summary>The interface protocol has not or cannot be determined.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.AgVisaInterfaceProtocol.SiclLan">
            <summary>The interface protocol is SICL-LAN.</summary>
        </member>
        <member name="F:Agilent.TMFramework.InstrumentIO.AgVisaInterfaceProtocol.Vxi11">
            <summary>The interface protocol is VXI-11.</summary>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaResourceName">
            <summary>
The VisaResourceName class parses a valid VISA resource name and returns its elements.
</summary><remarks>
The VisaResourceName class parses a valid VISA ResourceName string or alias, and 
can be queried for all of the elements of that string or alias.  The following table 
illustrates the format of the resourceName for different interface types. INSTR is 
a suffix that indicates that you are communicating with an INSTR resource 
type. All resource types are supported by Instrument Explorer but DirectIO only supports the 
INSTR resource type.
<list type="bullet">
<listheader><term>Interface and Description</term></listheader>
<item>ASRL is used for asynchronous serial devices.</item>
<item>GPIB is used for GPIB devices or interfaces.</item>
<item>GPIB-VXI is used for GPIB-VXI controllers.</item>
<item>TCPIP is used for LAN instruments.</item>
<item>VXI is used for VXI instruments.</item>
<item>USB is used for a USB device.</item></list>
<list type="table">
<listheader><term>Interface</term><description>Typical Syntax</description></listheader>
<item><term>ASRL (DirectIO and Instrument Explorer)</term><description>ASRL[board][::INSTR]</description></item>
<item><term>GPIB (DirectIO and Instrument Explorer)</term><description>GPIB[board]::primary address[::secondary address][::INSTR]</description></item>
<item><term>GPIB (Instrument Explorer only)</term><description>GPIB[board]::INTFC</description></item>
<item><term>GPIB-VXI (Instrument Explorer only)</term><description>GPIB-VXI[board]::VXI logical address[::INSTR]</description></item>
<item><term>GPIB-VXI (Instrument Explorer only)</term><description>GPIB-VXI[board]::MEMACC</description></item>
<item><term>GPIB-VXI (Instrument Explorer only)</term><description>GPIB-VXI[board][::VXI logical address]::BACKPLANE</description></item>
<item><term>TCPIP (DirectIO and Instrument Explorer)</term><description>TCPIP[board]::host address[::LAN device name]::INSTR</description></item>
<item><term>TCPIP (Instrument Explorer only)</term><description>TCPIP[board]::host address::port::SOCKET</description></item>
<item><term>VXI (Instrument Explorer only)</term><description>VXI[board]::VXI logical address[::INSTR]</description></item>
<item><term>VXI (Instrument Explorer only)</term><description>VXI[board]::MEMACC</description></item>
<item><term>VXI (Instrument Explorer only)</term><description>VXI[board][::VXI logical address]::BACKPLANE</description></item>
<item><term>USB (DirectIO and Instrument Explorer)</term><description>USB[board]::Manufacturer ID::Model Code::Instrument Serial Number::[USB Interface Number][::INSTR]</description></item>
</list>
<para>The VisaResourceName class takes either a resourceName or an alias. It 
tests if the resource address is well formed or the alias exists in the machine's IO Configuration.  
If the resourceName or alias is invalid, an exception is thrown (use TryParse or IsValid to avoid
an exception).  Otherwise an instance of VisaResourceName is returned, which can be queried via
properties and methods, for information about the resourceName, such as its InterfaceType or InterfaceNumber.
These properties return information about what was contained in the string that was passed to resourceName.
<b>Note: </b>If an alias is passed to the class, then the properties and methods all operate on the 
expanded resourceName that corresponds to the alias.</para> 
<para>For instance, if you pass in "GPIB::8" the address string is well formed, but the 
InterfaceNumberPresent property returns false (there is no interface number present). If you pass 
in the equivalent string "GPIB0::8", it is also well formed but the InterfaceNumberPresent 
property returns true. While these are completely equivalent addresses and will be validated (by 
default, a GPIB:: interface is assumed to be GPIB0), only one of the addresses explicitly refers to 
interface 0, the other uses the default.</para>
<para>Aliases are supported on USB because of the long addresses 
required by USB. If you pass the alias "UsbDevice1" to the class and you ask for 
the UsbSerialNumber, the value returned is the serial number that corresponds to that alias. This is 
because the alias creates a transparent logical connection to a well formed address.</para>
</remarks><see href="../Agilent.TMDirectIO/Connection%20Strings.htm"/>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.#ctor(System.String)">
            <summary>
The constructor for the VisaResourceName class. It requires a valid resource name.
</summary><param name="resourceName">A valid VISA resource name.</param><exception cref="T:System.ArgumentException">This is not a valid VISA resource name.</exception>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.Equals(System.Object)">
            <summary>
Compare two VisaResourceName instances to see if they are equal.
</summary><param name="obj">A VisaResourceName to be compared to the instance.</param><returns>A <see langword="true"/> if the two are equal.
</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.op_Equality(Agilent.TMFramework.InstrumentIO.VisaResourceName,Agilent.TMFramework.InstrumentIO.VisaResourceName)">
            <summary>
Compare two VisaResourceName instances for equality.
</summary><param name="x">The first VRN.</param><param name="y">The second VRN.</param><returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.op_Inequality(Agilent.TMFramework.InstrumentIO.VisaResourceName,Agilent.TMFramework.InstrumentIO.VisaResourceName)">
            <summary>
Compare two VisaResourceName instances to see if they are equal.
</summary><param name="x">The first VRN.</param><param name="y">The second VRN.</param><returns>A <see langword="true"/> if the two are equal.</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.GetHashCode">
            <summary>
Return the hashcode to test for equality.
</summary><returns>A <see langword="true"/> if the two are equal.</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.IsValid(System.String)">
            <summary>
Whether the <paramref name="resourceName"/> parameter is a valid VISA resource name.
</summary><param name="resourceName">A resource name value to be tested.</param><returns><see langword="True"/> if the resource name is a valid VISA resource name, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.TryParse(System.String)">
            <summary>
Creates a VisaResourceName object based on a VISA resource name string.
</summary><param name="resourceName">A VISA resource name string.</param><returns>If the <paramref name="resourceName"/> string is a valid VISA resource name, a new VisaResourceName object 
containing the VISA resource name is returned. 
Otherwise, a <see langword="null"/> is returned.</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.ToString">
            <summary>
Converts a VISA resource name to a string.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.SegmentAddress(System.String)">
            <summary>
Splits a VISA resource name into an array of strings based upon using "::" and ',' as separator 
tokens.
</summary><param name="resource"></param><returns>An array of strings containing each of the constituent segments of the VISA resource 
name.</returns><remarks>This method does not validate the VISA resource name. It assumes that it is passed a 
valid VISA resource name.</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.GetInterfaceInfo(System.String,Agilent.TMFramework.InstrumentIO.VisaInterfaceType@,System.Int32@)">
            <summary>Determines the type of VISA interface</summary><param name="resourceName">The VISA resource name</param><param name="interfaceType"></param><param name="interfaceNumber"></param><remarks>This method does not validate the VISA resource name. It assumes that it is passed a 
valid VISA resource name.</remarks>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.GetResourceType(System.String)">
            <summary>
Returns the VISA resource type for the specified resource name string.
</summary><param name="resourceName"></param><remarks>This method does not validate the VISA resource name.  It assumes that it is passed a 
valid VISA resource name.</remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.ResourceName">
            <summary>
The VISA resource name.
</summary><remarks>
An example of a valid VISA resource name would be GPIB::1::0::INSTR. This equates to a GPIB device 
at primary address 1 and secondary address 0 on GPIB interface 0. If you have a different GPIB 
interface number you must call it out such as GPIP2::1::0::INSTR.
</remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.Segments">
            <summary>
An array of strings containing the pieces of the resourceName, split apart at :: (colon colon) and , (comma).
</summary><remarks>
As an example, the VISA resource name GPIB::1::0::INSTR would return {"GPIB", "1", "0", "INSTR" }.
</remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.ResourceType">
            <summary>
Valid VISA resource types are INSTR, INTFC, BACKPLANE, SERVANT, MEMACC, and SOCKET.
</summary><remarks>
Instrument Explorer supports all resource types and DirectIO only supports INSTR.
</remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.InterfaceType">
            <summary>
Valid VISA interface types are GPIB, GPIB-VXI, VXI, TCPIP, ASRL, and USB.
</summary><remarks>
Instrument Explorer supports all interface types. DirectIO supports GPIB, ASRL, TCPIP, and USB.
</remarks>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.InterfaceNumberPresent">
            <summary>
Gets a boolean that answers whether an interface with the specified number is present in the 
ResourceName. The first board in the system for each interface type is number 0.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.InterfaceNumber">
            <summary>
The number of the board for the given interface type. The first board is number 0.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.UnaliasedExpandedResourceName">
            <summary>
If this is an alias, this property returns the true resource name. For example, for an alias such as 'UsbDevice1', a return 
value could be a real address "USB0::2391::1031::0000000123::0::INSTR". If the original resourceName does not have an alias, 
this property returns String.Empty.
<b>Note:  </b>This property only returns a string when the Alias property is populated.
You can also see if an alias exists by checking if Alias.Length &gt; 0.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.Alias">
            <summary>
If this resourceName has an alias,  the alias is returned. <b>Note:  </b>A resourceName can have multiple aliases. In these cases, 
one valid alias is always returned. Otherwise this property returns String.Empty.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.GpibPrimaryAddress">
            <summary>
The primary address of the GPIB device.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.GpibSecondaryAddressPresent">
            <summary>
Whether a GPIB secondary address is present in the ResourceName.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.GpibSecondaryAddress">
            <summary>
The secondary address of the GPIB device.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.VxiLogicalAddressPresent">
            <summary>
Whether a VXI logical address is present in the ResourceName.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.VxiLogicalAddress">
            <summary>
The VXI logical address of the device.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.TcpipHostAddressPresent">
            <summary>
Whether a TCPIP host address is present in the ResourceName.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.TcpipHostAddress">
            <summary>
The TCPIP host address.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.TcpipDeviceNamePresent">
            <summary>
Whether a TCPIP device name is present in the ResourceName.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.TcpipDeviceName">
            <summary>
The TCPIP device name.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.TcpipPortPresent">
            <summary>
Whether a TCPIP port number is present in the ResourceName.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.TcpipPort">
            <summary>
The TCPIP port number.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.UsbManufacturerID">
            <summary>
The manufacturer of the USB device.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.UsbModelCode">
            <summary>
The model code of the USB device.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.UsbSerialNumber">
            <summary>
The USB device's serial number.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.UsbInterfaceNumberPresent">
            <summary>
Whether a USB interface number is present in the ResourceName. This is not the same as the primary interface number.
</summary>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceName.UsbInterfaceNumber">
            <summary>
The USB instrument-specific interface number, not to be confused with the USB board number.
The best analogy is with GPIB, which has a similar secondary address scheme.
In theory, you could have a USB device with multiple cards housed within its cage. Each card would
have a unique USB interface number.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.VisaResourceNameParser.Parse">
            <summary>
            
            </summary>
            <returns><see langword="true"/> if the resourceName is a valid VISA resourceName, 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.VisaResourceNameParser.ExpandAlias(System.String@)">
            <summary>
            If it is an alias:
              - Modifies m_parent.m_unaliasedExpandedResourceName   and   m_parent.m_alias
              - Modifies visaAddress parameter to be the expanded name
            </summary>
            <param name="visaAddr"></param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceName.VisaResourceNameParser.GetInterfaceAndNum(System.String,System.String@)">
            <summary>
            Split interface name into interface type name and board number, if present
            Set the VisaAddres instance variables.  Board number is single digit only.
            </summary>
            <param name="prefix"></param>
            <param name="intfname"></param>
            <returns></returns>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaResourceNameFormatException">
            <summary>
Provides for the handling of VISA exceptions.
</summary><summary>
Provides methods for handling exceptions.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceNameFormatException.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaResourceNameFormatException"/> class. 
</summary><param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceNameFormatException.#ctor(System.String,System.Exception)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaResourceNameFormatException"/> class. 
</summary><param name="message">The error message that explains the reason for the exception.</param><param name="inner">An instance of <see cref="T:System.Exception"/> that is the cause of the current <see langword="Exception"/>. If 
<paramref name="inner"/> is not <see langword="null"/>, then the current 
<see langword="Exception"/> is raised in a catch block handling <paramref name="inner"/>.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceNameFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Initializes a new instance of the <see cref="T:Agilent.TMFramework.InstrumentIO.VisaResourceNameFormatException"/> class with 
serialized data. 
</summary><param name="info">The object that holds the serialized object data.</param><param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaUtil">
            <summary>
Provides several useful miscellaneous utilities to aid interactions with VISA.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.Failed(Agilent.TMFramework.InstrumentIO.VisaStatus)">
            <summary>
Returns <see langword="true"/> for a failed VISA status.
</summary><param name="status">The VISA status code.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.Failed(System.Int32)">
            <summary>
Returns <see langword="true"/> for a failed status.
</summary><param name="status">The VISA status code.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.IsWarning(Agilent.TMFramework.InstrumentIO.VisaStatus)">
            <summary>
Tells you if the VISA status code you pass is a warning code or not.
</summary><param name="status">The VISA status code.</param><returns>A <see langword="true"/> value if the VISA operation was successful; otherwise false.</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.IsWarning(System.Int32)">
            <summary>
Tells you if the VISA integer you pass is a warning code or not.
</summary><param name="status"></param><returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.Succeeded(Agilent.TMFramework.InstrumentIO.VisaStatus)">
            <summary>
Returns <see langword="true"/> for any non-error status. This includes a warning status.
</summary><param name="status">The VISA status code.</param><returns>A <see langword="true"/> if the VISA operation was successful or generated a warning; 
otherwise false.</returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.Succeeded(System.Int32)">
            <summary>
Returns <see langword="true"/> for any integer with a non-error status. This includes a warning status.
</summary><param name="status">A VISA integer return code.</param><returns></returns>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.GetMajorVersion(System.Int32)">
            <summary>
Returns the VISA major version number.
</summary><param name="version">Full VISA version number.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.GetMinorVersion(System.Int32)">
            <summary>
Returns the VISA minor version number.
</summary><param name="version">Full VISA version number.</param>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaUtil.GetSubMinorVersion(System.Int32)">
            <summary>
Returns the VISA sub minor version number.
</summary><param name="version">Full VISA version number.</param>
        </member>
        <member name="T:Agilent.TMFramework.InstrumentIO.VisaResourceNameComparer">
            <summary>
This comparer assumes that it is only sorting "INSTR" session types. It is a complete implementation 
of IComparer that properly compares/sorts VISA resource strings by taking into account 
GPIB0::9 coming before GPIB0::11.
</summary>
        </member>
        <member name="M:Agilent.TMFramework.InstrumentIO.VisaResourceNameComparer.Compare(System.Object,System.Object)">
            <summary>
Compares two VISA INSTR resource names.
</summary><param name="a">A VISA INSTR resource name.</param><param name="b">A VISA INSTR resource name.</param><returns>Returns a 0 if <paramref name="a"/> equals <paramref name="b"/>, a 1 if 
<paramref name="a"/> is greater than <paramref name="b"/>, and a -1 if <paramref name="a"/> 
is less than <paramref name="b"/>.</returns>
        </member>
        <member name="P:Agilent.TMFramework.InstrumentIO.VisaResourceNameComparer.Default">
            <summary>
Gets an instance of <see cref="T:Agilent.TMFramework.InstrumentIO.VisaResourceNameComparer"/> that is always available.
</summary>
        </member>
    </members>
</doc>
